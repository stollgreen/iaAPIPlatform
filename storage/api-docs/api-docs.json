{
    "openapi": "3.0.0",
    "info": {
        "title": "HR-Tool API",
        "description": "API for managing employees in the company",
        "contact": {
            "name": "Support Team",
            "url": "https:\/\/localhost:8000",
            "email": "support@mail.none"
        },
        "license": {
            "name": "MIT",
            "url": "https:\/\/opensource.org\/licenses\/MIT"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http:\/\/localhost:8000\/api",
            "description": "APIv1"
        }
    ],
    "paths": {
        "\/commitments": {
            "get": {
                "tags": [
                    "Commitments"
                ],
                "summary": "List commitments",
                "description": "Retrieve a paginated list of commitments",
                "operationId": "listCommitments",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 15
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "1"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of commitments",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CommitmentCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CommitmentCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Commitments"
                ],
                "summary": "Create a new commitment",
                "description": "Create a new commitment",
                "operationId": "createCommitment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CommitmentStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "Successfully created commitment",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CommitmentResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CommitmentResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/commitments\/{commitment}": {
            "get": {
                "tags": [
                    "Commitments"
                ],
                "summary": "Retrieve details of a specific commitment",
                "description": "Retrieve details of a specific commitment",
                "operationId": "showCommitment",
                "parameters": [
                    {
                        "name": "commitment",
                        "in": "path",
                        "description": "The ID of the commitment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved commitment details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CommitmentResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CommitmentResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Commitments"
                ],
                "summary": "Update an existing commitment",
                "description": "Update an existing commitment",
                "operationId": "updateCommitment",
                "parameters": [
                    {
                        "name": "commitment",
                        "in": "path",
                        "description": "The ID of the commitment to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CommitmentUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated commitment",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CommitmentResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CommitmentResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Commitments"
                ],
                "summary": "Delete a specific commitment",
                "description": "Delete a specific commitment",
                "operationId": "deleteCommitment",
                "parameters": [
                    {
                        "name": "commitment",
                        "in": "path",
                        "description": "The ID of the commitment to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted commitment",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Commitment not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/commitments\/methods": {
            "get": {
                "tags": [
                    "Commitments"
                ],
                "summary": "List all supported HTTP methods for commitments",
                "description": "Retrieve the list of supported HTTP methods for commitments",
                "operationId": "listMethodsCommitments",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsCommitmentsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsCommitmentsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/commitment-states": {
            "get": {
                "tags": [
                    "Commitment States"
                ],
                "summary": "List commitment states",
                "description": "Retrieve a paginated list of commitment states",
                "operationId": "listCommitmentStates",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of commitment states",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CommitmentStateCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CommitmentStateCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Commitment States"
                ],
                "summary": "Create a new commitment state",
                "description": "Store a newly created commitment state in storage.",
                "operationId": "createCommitmentState",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CommitmentStateStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created commitment state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CommitmentStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CommitmentStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "CommitmentStateStoreRequestValidationErrors",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": {
                                                "name": [
                                                    "The name field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        },
                        "x-1": {
                            "title": "CommitmentStateStoreRequestValidationErrors",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "errors": {
                                    "type": "object",
                                    "example": {
                                        "name": [
                                            "The name field is required."
                                        ]
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "\/commitment-states\/{commitmentState}": {
            "get": {
                "tags": [
                    "Commitment States"
                ],
                "summary": "Retrieve details of a specific commitment state",
                "description": "Display the specified commitment state.",
                "operationId": "showCommitmentState",
                "parameters": [
                    {
                        "name": "commitmentState",
                        "in": "path",
                        "description": "The ID of the commitment state to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Default"
                    },
                    "404": {
                        "description": "Commitment state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Commitment States"
                ],
                "summary": "Update an existing commitment state",
                "description": "Update the specified commitment state in storage.",
                "operationId": "updateCommitmentState",
                "parameters": [
                    {
                        "name": "commitmentState",
                        "in": "path",
                        "description": "The ID of the commitment state to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CommitmentStateUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated commitment state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CommitmentStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CommitmentStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Commitment state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Commitment States"
                ],
                "summary": "Delete a specific commitment state",
                "description": "Remove the specified commitment state from storage.",
                "operationId": "deleteCommitmentState",
                "parameters": [
                    {
                        "name": "commitmentState",
                        "in": "path",
                        "description": "The ID of the commitment state to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/Default"
                    },
                    "404": {
                        "description": "Commitment state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/commitment-states\/methods": {
            "get": {
                "tags": [
                    "Commitment States"
                ],
                "summary": "Retrieve the list of supported HTTP methods for commitment states",
                "description": "Return supported HTTP methods for the resource.",
                "operationId": "listMethodsCommitmentStates",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsCommitmentStatesMethods",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsCommitmentStatesMethods",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/contact-persons": {
            "get": {
                "tags": [
                    "ContactPersons"
                ],
                "summary": "List contact persons",
                "description": "Retrieve a paginated list of contact persons",
                "operationId": "listContactPersons",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of contact persons",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ContactPersonCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ContactPersonCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "ContactPersons"
                ],
                "summary": "Create a new contact person",
                "description": "Create a new contact person",
                "operationId": "createContactPerson",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ContactPersonStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created contact person",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ContactPersonResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ContactPersonResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/contact-persons\/{contactPerson}": {
            "get": {
                "tags": [
                    "ContactPersons"
                ],
                "summary": "Retrieve details of a specific contact person",
                "description": "Retrieve details of a specific contact person",
                "operationId": "showContactPerson",
                "parameters": [
                    {
                        "name": "contactPerson",
                        "in": "path",
                        "description": "The ID of the contact person to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved contact person details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ContactPersonResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ContactPersonResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "ContactPersons"
                ],
                "summary": "Update an existing contact person",
                "description": "Update an existing contact person",
                "operationId": "updateContactPerson",
                "parameters": [
                    {
                        "name": "contactPerson",
                        "in": "path",
                        "description": "The ID of the contact person to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ContactPersonUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated contact person",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ContactPersonResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ContactPersonResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "ContactPersons"
                ],
                "summary": "Delete a specific contact person",
                "description": "Delete a specific contact person",
                "operationId": "deleteContactPerson",
                "parameters": [
                    {
                        "name": "contactPerson",
                        "in": "path",
                        "description": "The ID of the contact person to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted contact person",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/contact-persons\/methods": {
            "get": {
                "tags": [
                    "ContactPersons"
                ],
                "summary": "List all supported HTTP methods for contact persons",
                "description": "Retrieve the list of supported HTTP methods for contact persons",
                "operationId": "listMethodsContactPersons",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsContactPersonsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsContactPersonsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "List all countries",
                "description": "Retrieve a paginated list of countries",
                "operationId": "listCountries",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of countries",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CountryCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CountryCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Countries"
                ],
                "summary": "Create a new country",
                "description": "Create a new country",
                "operationId": "createCountry",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CountryStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved commitment details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CountryResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CountryResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/countries\/{country}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Retrieve country details",
                "description": "Retrieve details of a specific country",
                "operationId": "showCountry",
                "parameters": [
                    {
                        "name": "country",
                        "in": "path",
                        "description": "The ID of the country to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved commitment details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CountryResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CountryResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Countries"
                ],
                "summary": "Update a country",
                "description": "Update an existing country",
                "operationId": "updateCountry",
                "parameters": [
                    {
                        "name": "country",
                        "in": "path",
                        "description": "The ID of the country to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CountryUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated country",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CountryResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CountryResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Countries"
                ],
                "summary": "Delete a country",
                "description": "Delete a specific country",
                "operationId": "deleteCountry",
                "parameters": [
                    {
                        "name": "country",
                        "in": "path",
                        "description": "The ID of the country to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted country",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/countries\/methods": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "List all supported HTTP methods for countries",
                "description": "Retrieve the list of supported HTTP methods for countries",
                "operationId": "listMethodsCountries",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsCountriesResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsCountriesResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/customers": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "List customers",
                "description": "Retrieve a paginated list of customers",
                "operationId": "listCustomers",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of customers retrieved successfully",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CustomerCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CustomerCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Customers"
                ],
                "summary": "Create customer",
                "description": "Create a new customer",
                "operationId": "createCustomer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CustomerStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Customer successfully created",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CustomerResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CustomerResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/customers\/{customer}": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "Retrieve customer details",
                "description": "Retrieve details of a specific customer",
                "operationId": "showCustomer",
                "parameters": [
                    {
                        "name": "customer",
                        "in": "path",
                        "description": "The ID of the customer to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer details retrieved successfully",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CustomerResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CustomerResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Customers"
                ],
                "summary": "Update customer",
                "description": "Update an existing customer",
                "operationId": "updateCustomer",
                "parameters": [
                    {
                        "name": "customer",
                        "in": "path",
                        "description": "The ID of the customer to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CustomerUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Customer successfully updated",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CustomerResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/CustomerResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customers"
                ],
                "summary": "Delete customer",
                "description": "Delete a specific customer",
                "operationId": "deleteCustomer",
                "parameters": [
                    {
                        "name": "customer",
                        "in": "path",
                        "description": "The ID of the customer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Customer successfully deleted",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/customers\/methods": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "Retrieve supported HTTP methods for customers",
                "description": "Retrieve a list of supported HTTP methods for customers",
                "operationId": "listMethodsCustomers",
                "responses": {
                    "200": {
                        "description": "Supported methods retrieved successfully",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsCustomersResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsCustomersResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/departments": {
            "get": {
                "tags": [
                    "Departments"
                ],
                "summary": "List departments",
                "description": "Retrieve a paginated list of departments",
                "operationId": "listDepartments",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "1"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of departments",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DepartmentCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/DepartmentCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Departments"
                ],
                "summary": "Create a new department",
                "description": "Create a new department",
                "operationId": "updateDepartment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/DepartmentStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created department",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DepartmentResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/DepartmentResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/departments\/{department}": {
            "get": {
                "tags": [
                    "Departments"
                ],
                "summary": "Retrieve details of a specific department",
                "description": "Retrieve details of a specific department",
                "operationId": "showDepartment",
                "parameters": [
                    {
                        "name": "department",
                        "in": "path",
                        "description": "The ID of the department to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved department details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DepartmentResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/DepartmentResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Departments"
                ],
                "summary": "Update an existing department",
                "description": "Update an existing department",
                "operationId": "updateDepartments",
                "parameters": [
                    {
                        "name": "department",
                        "in": "path",
                        "description": "The ID of the department to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/DepartmentUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated department",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DepartmentResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/DepartmentResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Departments"
                ],
                "summary": "Delete a specific department",
                "description": "Delete a specific department",
                "operationId": "deleteDepartment",
                "parameters": [
                    {
                        "name": "department",
                        "in": "path",
                        "description": "The ID of the department to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted department",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/departments\/methods": {
            "get": {
                "tags": [
                    "Departments"
                ],
                "summary": "List all supported HTTP methods for departments",
                "description": "Retrieve the list of supported HTTP methods for departments",
                "operationId": "listMethodsDepartments",
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Default"
                    }
                }
            }
        },
        "\/employees": {
            "get": {
                "tags": [
                    "Employees"
                ],
                "summary": "List employees",
                "description": "Retrieve a paginated list of employees",
                "operationId": "listEmployees",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of employees",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EmployeeCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EmployeeCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Employees"
                ],
                "summary": "Create a new employee",
                "description": "Create a new employee",
                "operationId": "createEmployee",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/EmployeeStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created employee",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EmployeeResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EmployeeResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/employees\/{employee}": {
            "get": {
                "tags": [
                    "Employees"
                ],
                "summary": "Retrieve details of a specific employee",
                "description": "Retrieve details of a specific employee",
                "operationId": "showEmployee",
                "parameters": [
                    {
                        "name": "employee",
                        "in": "path",
                        "description": "The ID of the employee to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved employee details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EmployeeResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EmployeeResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Employees"
                ],
                "summary": "Update an existing employee",
                "description": "Update an existing employee",
                "operationId": "updateEmployee",
                "parameters": [
                    {
                        "name": "employee",
                        "in": "path",
                        "description": "The ID of the employee to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/EmployeeUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated employee",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EmployeeResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EmployeeResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Employees"
                ],
                "summary": "Delete a specific employee",
                "description": "Delete a specific employee",
                "operationId": "deleteEmployee",
                "parameters": [
                    {
                        "name": "employee",
                        "in": "path",
                        "description": "The ID of the employee to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted employee",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/employees\/methods": {
            "get": {
                "tags": [
                    "Employees"
                ],
                "summary": "List all supported HTTP methods for employees",
                "description": "Retrieve the list of supported HTTP methods for employees",
                "operationId": "listMethodsEmployees",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsEmployeesResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsEmployeesResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "List events",
                "description": "Retrieve a paginated list of events",
                "operationId": "listEvents",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "1"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of events",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create a new event",
                "description": "Create a new event",
                "operationId": "createEvent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/EventStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created event",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/events\/{event}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Retrieve details of a specific event",
                "description": "Retrieve details of a specific event",
                "operationId": "showEvent",
                "parameters": [
                    {
                        "name": "event",
                        "in": "path",
                        "description": "The ID of the event to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved event details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Update an existing event",
                "description": "Update an existing event",
                "operationId": "updateEvent",
                "parameters": [
                    {
                        "name": "event",
                        "in": "path",
                        "description": "The ID of the event to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/EventUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated event",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete a specific event",
                "description": "Delete a specific event",
                "operationId": "deleteEvent",
                "parameters": [
                    {
                        "name": "event",
                        "in": "path",
                        "description": "The ID of the event to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted event",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/events\/methods": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "List all supported HTTP methods for events",
                "description": "Retrieve the list of supported HTTP methods for events",
                "operationId": "listMethodsEvents",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsEventsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsEventsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/event-states": {
            "get": {
                "tags": [
                    "Event States"
                ],
                "summary": "List event states",
                "description": "Retrieve a paginated list of event states",
                "operationId": "listEventStates",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of event states",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventStateCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventStateCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Event States"
                ],
                "summary": "Create a new event state",
                "description": "Create a new event state",
                "operationId": "createEventState",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/EventStateStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created event state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/event-states\/{eventState}": {
            "get": {
                "tags": [
                    "Event States"
                ],
                "summary": "Retrieve details of a specific event state",
                "description": "Retrieve details of a specific event state",
                "operationId": "showEventState",
                "parameters": [
                    {
                        "name": "eventState",
                        "in": "path",
                        "description": "The ID of the event state to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved event state details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Event States"
                ],
                "summary": "Update an existing event state",
                "description": "Update an existing event state",
                "operationId": "updateEventState",
                "parameters": [
                    {
                        "name": "eventState",
                        "in": "path",
                        "description": "The ID of the event state to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/EventStateUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated event state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EventStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/EventStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Event States"
                ],
                "summary": "Delete a specific event state",
                "description": "Delete a specific event state",
                "operationId": "deleteEventState",
                "parameters": [
                    {
                        "name": "eventState",
                        "in": "path",
                        "description": "The ID of the event state to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted event state",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/event-states\/methods": {
            "get": {
                "tags": [
                    "Event States"
                ],
                "summary": "List all supported HTTP methods for event states",
                "description": "Retrieve the list of supported HTTP methods for event states",
                "operationId": "listMethodsEventStates",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsEventStatesResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsEventStatesResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/genders": {
            "get": {
                "tags": [
                    "Genders"
                ],
                "summary": "List genders",
                "description": "Retrieve a paginated list of genders",
                "operationId": "listGenders",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of genders",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/GenderCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/GenderCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Genders"
                ],
                "summary": "Create a new gender",
                "description": "Create a new gender",
                "operationId": "createGender",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/GenderStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created gender",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/GenderResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/GenderResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/genders\/{gender}": {
            "get": {
                "tags": [
                    "Genders"
                ],
                "summary": "Retrieve details of a specific gender",
                "description": "Retrieve details of a specific gender",
                "operationId": "showGender",
                "parameters": [
                    {
                        "name": "gender",
                        "in": "path",
                        "description": "The ID of the gender to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved gender details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/GenderResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/GenderResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Genders"
                ],
                "summary": "Update an existing gender",
                "description": "Update an existing gender",
                "operationId": "updateGender",
                "parameters": [
                    {
                        "name": "gender",
                        "in": "path",
                        "description": "The ID of the gender to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/GenderUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated gender",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/GenderResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/GenderResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Genders"
                ],
                "summary": "Delete a specific gender",
                "description": "Delete a specific gender",
                "operationId": "deleteGender",
                "parameters": [
                    {
                        "name": "gender",
                        "in": "path",
                        "description": "The ID of the gender to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted gender",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/genders\/methods": {
            "get": {
                "tags": [
                    "Genders"
                ],
                "summary": "List all supported HTTP methods for genders",
                "description": "Retrieve the list of supported HTTP methods for genders",
                "operationId": "listMethodsGenders",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsGendersResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsGendersResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/inventory-conditions": {
            "get": {
                "tags": [
                    "Inventory Conditions"
                ],
                "summary": "List inventory conditions",
                "description": "Retrieve a paginated list of inventory conditions",
                "operationId": "listInventoryConditions",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of inventory conditions",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryConditionCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryConditionCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Inventory Conditions"
                ],
                "summary": "Create a new inventory condition",
                "description": "Create a new inventory condition",
                "operationId": "createInventoryCondition",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/InventoryConditionStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created inventory condition",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryConditionResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryConditionResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/inventory-conditions\/{inventoryCondition}": {
            "get": {
                "tags": [
                    "Inventory Conditions"
                ],
                "summary": "Retrieve a specific inventory condition",
                "description": "Retrieve details of a specific inventory condition",
                "operationId": "showInventoryCondition",
                "parameters": [
                    {
                        "name": "inventoryCondition",
                        "in": "path",
                        "description": "The ID of the inventory condition to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved inventory condition details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryConditionResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryConditionResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Inventory Conditions"
                ],
                "summary": "Update an inventory condition",
                "description": "Update an existing inventory condition",
                "operationId": "updateInventoryCondition",
                "parameters": [
                    {
                        "name": "inventoryCondition",
                        "in": "path",
                        "description": "The ID of the inventory condition to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/InventoryConditionUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated inventory condition",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryConditionResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryConditionResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Inventory Conditions"
                ],
                "summary": "Delete an inventory condition",
                "description": "Delete a specific inventory condition",
                "operationId": "deleteInventoryCondition",
                "parameters": [
                    {
                        "name": "inventoryCondition",
                        "in": "path",
                        "description": "The ID of the inventory condition to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted inventory condition",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Inventory condition not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/inventory-conditions\/methods": {
            "get": {
                "tags": [
                    "Inventory Conditions"
                ],
                "summary": "List supported HTTP methods for inventory conditions",
                "description": "Retrieve the list of supported HTTP methods for inventory conditions",
                "operationId": "listMethodsInventoryConditions",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsInventoryConditionsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsInventoryConditionsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/inventories": {
            "get": {
                "tags": [
                    "Inventories"
                ],
                "summary": "List inventories",
                "description": "Retrieve a paginated list of inventories",
                "operationId": "listInventories",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of inventories",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Inventories"
                ],
                "summary": "Create a new inventory",
                "description": "Create a new inventory",
                "operationId": "createInventory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/InventoryStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created inventory",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "\/inventories\/{inventory}": {
            "get": {
                "tags": [
                    "Inventories"
                ],
                "summary": "Retrieve details of a specific inventory",
                "description": "Retrieve details of a specific inventory",
                "operationId": "showInventory",
                "parameters": [
                    {
                        "name": "inventory",
                        "in": "path",
                        "description": "The ID of the inventory to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved inventory details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Inventory not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Inventories"
                ],
                "summary": "Update an existing inventory",
                "description": "Update an existing inventory",
                "operationId": "updateInventory",
                "parameters": [
                    {
                        "name": "inventory",
                        "in": "path",
                        "description": "The ID of the inventory to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/InventoryUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated inventory",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InventoryResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InventoryResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Inventory not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Inventories"
                ],
                "summary": "Delete a specific inventory",
                "description": "Delete a specific inventory",
                "operationId": "deleteInventory",
                "parameters": [
                    {
                        "name": "inventory",
                        "in": "path",
                        "description": "The ID of the inventory to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted inventory",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Inventory not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/inventories\/methods": {
            "get": {
                "tags": [
                    "Inventories"
                ],
                "summary": "List all supported HTTP methods for inventories",
                "description": "Retrieve the list of supported HTTP methods for inventories",
                "operationId": "listMethodsInventory",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsInventory",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsInventory",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/invoices": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "List invoices",
                "description": "Retrieve a paginated list of invoices",
                "operationId": "listInvoices",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 15
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of invoices",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InvoiceCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InvoiceCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Create a new invoice",
                "description": "Create a new invoice",
                "operationId": "createInvoice",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/InvoiceStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created invoice",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InvoiceResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InvoiceResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "\/invoices\/{invoice}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Retrieve details of a specific invoice",
                "description": "Retrieve details of a specific invoice",
                "operationId": "showInvoice",
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The ID of the invoice to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved invoice details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InvoiceResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InvoiceResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Invoice not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Update an existing invoice",
                "description": "Update an existing invoice",
                "operationId": "updateInvoice",
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The ID of the invoice to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/InvoiceUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated invoice",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InvoiceResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/InvoiceResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Delete a specific invoice",
                "description": "Delete a specific invoice",
                "operationId": "deleteInvoice",
                "parameters": [
                    {
                        "name": "invoice",
                        "in": "path",
                        "description": "The ID of the invoice to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted invoice",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                }
            }
        },
        "\/invoices\/methods": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "List all supported HTTP methods for invoices",
                "description": "Retrieve the list of supported HTTP methods for invoices",
                "operationId": "listMethodsInvoices",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsInvoicesResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsInvoicesResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/locations": {
            "get": {
                "tags": [
                    "Locations"
                ],
                "summary": "List locations",
                "description": "Retrieve a paginated list of locations",
                "operationId": "listLocations",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of locations",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/LocationCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/LocationCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Locations"
                ],
                "summary": "Create location",
                "description": "Create a new location",
                "operationId": "createLocation",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/LocationStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created location",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/LocationResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/LocationResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "\/locations\/{location}": {
            "get": {
                "tags": [
                    "Locations"
                ],
                "summary": "Retrieve location details",
                "description": "Retrieve details of a specific location",
                "operationId": "showLocation",
                "parameters": [
                    {
                        "name": "location",
                        "in": "path",
                        "description": "The ID of the location to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved location details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/LocationResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/LocationResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Location not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Locations"
                ],
                "summary": "Update location",
                "description": "Update an existing location",
                "operationId": "updateLocation",
                "parameters": [
                    {
                        "name": "location",
                        "in": "path",
                        "description": "The ID of the location to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/LocationUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated location",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/LocationResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/LocationResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Locations"
                ],
                "summary": "Delete location",
                "description": "Delete a specific location",
                "operationId": "deleteLocation",
                "parameters": [
                    {
                        "name": "location",
                        "in": "path",
                        "description": "The ID of the location to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted location",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Location not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/locations\/methods": {
            "get": {
                "tags": [
                    "Locations"
                ],
                "summary": "List supported HTTP methods for locations",
                "description": "Retrieve the list of supported HTTP methods for locations",
                "operationId": "listMethodsLocations",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsLocationsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsLocationsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/occupations": {
            "get": {
                "tags": [
                    "Occupations"
                ],
                "summary": "List occupations",
                "description": "Retrieve a paginated list of occupations",
                "operationId": "listOccupations",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "1"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of occupations",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OccupationCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OccupationCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Occupations"
                ],
                "summary": "Create a new occupation",
                "description": "Create a new occupation",
                "operationId": "createOccupation",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/OccupationStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created occupation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OccupationResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OccupationResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/occupations\/{occupation}": {
            "get": {
                "tags": [
                    "Occupations"
                ],
                "summary": "Retrieve details of a specific occupation",
                "description": "Retrieve details of a specific occupation",
                "operationId": "showOccupation",
                "parameters": [
                    {
                        "name": "occupation",
                        "in": "path",
                        "description": "The ID of the occupation to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved occupation details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OccupationResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OccupationResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Occupation not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Occupations"
                ],
                "summary": "Update an existing occupation",
                "description": "Update an existing occupation",
                "operationId": "updateOccupation",
                "parameters": [
                    {
                        "name": "occupation",
                        "in": "path",
                        "description": "The ID of the occupation to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/OccupationUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated occupation",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OccupationResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OccupationResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Occupation not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Occupations"
                ],
                "summary": "Delete a specific occupation",
                "description": "Delete a specific occupation",
                "operationId": "deleteOccupation",
                "parameters": [
                    {
                        "name": "occupation",
                        "in": "path",
                        "description": "The ID of the occupation to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted occupation",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Occupation not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/occupations\/methods": {
            "get": {
                "tags": [
                    "Occupations"
                ],
                "summary": "List all supported HTTP methods for occupations",
                "description": "Retrieve the list of supported HTTP methods for occupations",
                "operationId": "listMethodsOccupations",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsOccupationsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsOccupationsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/offers": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "List offers",
                "description": "Retrieve a paginated list of offers",
                "operationId": "listOffers",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of offers",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Offers"
                ],
                "summary": "Create a new offer",
                "description": "Create a new offer",
                "operationId": "createOffer",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/OfferStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created offer",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/offers\/{offer}": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "Retrieve a specific offer",
                "description": "Retrieve details of a specific offer",
                "operationId": "showOffer",
                "parameters": [
                    {
                        "name": "offer",
                        "in": "path",
                        "description": "The ID of the offer to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved offer details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Offers"
                ],
                "summary": "Update an offer",
                "description": "Update an existing offer",
                "operationId": "updateOffer",
                "parameters": [
                    {
                        "name": "offer",
                        "in": "path",
                        "description": "The ID of the offer to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/OfferUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated offer",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Offers"
                ],
                "summary": "Delete an offer",
                "description": "Delete an offer",
                "operationId": "deleteOffer",
                "parameters": [
                    {
                        "name": "offer",
                        "in": "path",
                        "description": "The ID of the offer to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted offer",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Offer not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/offers\/methods": {
            "get": {
                "tags": [
                    "Offers"
                ],
                "summary": "List supported HTTP methods for offers",
                "description": "Retrieve the list of supported HTTP methods for offers",
                "operationId": "listMethodsOffers",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsOffersResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsOffersResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/offer-states": {
            "get": {
                "tags": [
                    "OfferStates"
                ],
                "summary": "List offer states",
                "description": "Retrieve a paginated list of offer states",
                "operationId": "listOfferStates",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 15
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of offer states",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferStateCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferStateCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "OfferStates"
                ],
                "summary": "Create a new offer state",
                "description": "Create a new offer state",
                "operationId": "createOfferState",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/OfferStateStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created offer state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/offer-states\/{offerState}": {
            "get": {
                "tags": [
                    "OfferStates"
                ],
                "summary": "Retrieve details of a specific offer state",
                "description": "Retrieve details of a specific offer state",
                "operationId": "showOfferState",
                "parameters": [
                    {
                        "name": "offerState",
                        "in": "path",
                        "description": "The ID of the offer state to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved offer state details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Offer state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "OfferStates"
                ],
                "summary": "Update an existing offer state",
                "description": "Update an existing offer state",
                "operationId": "updateOfferState",
                "parameters": [
                    {
                        "name": "offerState",
                        "in": "path",
                        "description": "The ID of the offer state to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/OfferStateUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully updated offer state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Requested offer state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "OfferStates"
                ],
                "summary": "Delete a specific offer state",
                "description": "Delete a specific offer state",
                "operationId": "deleteOfferState",
                "parameters": [
                    {
                        "name": "offerState",
                        "in": "path",
                        "description": "The ID of the offer state to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted offer state",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Requested offer state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/offer-states\/{offer_state_id}\/offers": {
            "get": {
                "tags": [
                    "OfferStates"
                ],
                "summary": "List offers to the requested offer state",
                "description": "Retrieve a paginated list of offers to the requested offer state",
                "operationId": "listOfferStateOffers",
                "parameters": [
                    {
                        "name": "offer_state_id",
                        "in": "path",
                        "description": "The ID of the offer state to retrieve offers for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "1"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved offers states",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/OfferCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/OfferCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Requested offer state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/offer-states\/methods": {
            "get": {
                "tags": [
                    "OfferStates"
                ],
                "summary": "List all supported HTTP methods for offer states",
                "description": "Retrieve the list of supported HTTP methods for offer states",
                "operationId": "listMethodsOfferStates",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsOfferStatesResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsOfferStatesResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/payment-states": {
            "get": {
                "tags": [
                    "Payment States"
                ],
                "summary": "List payment states",
                "description": "Retrieve a paginated list of payment states",
                "operationId": "listPaymentStates",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": "1"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of payment states",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PaymentStateCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PaymentStateCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Payment States"
                ],
                "summary": "Create a new payment state",
                "description": "Create a new payment state",
                "operationId": "createPaymentState",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PaymentStateStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created payment state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PaymentStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PaymentStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/payment-states\/{paymentState}": {
            "get": {
                "tags": [
                    "Payment States"
                ],
                "summary": "Retrieve details of a specific payment state",
                "description": "Retrieve details of a specific payment state",
                "operationId": "showPaymentState",
                "parameters": [
                    {
                        "name": "paymentState",
                        "in": "path",
                        "description": "The ID of the payment state to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved payment state details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PaymentStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PaymentStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Payment state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Payment States"
                ],
                "summary": "Update an existing payment state",
                "description": "Update an existing payment state",
                "operationId": "updatePaymentState",
                "parameters": [
                    {
                        "name": "paymentState",
                        "in": "path",
                        "description": "The ID of the payment state to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PaymentStateUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated payment state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PaymentStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PaymentStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Payment state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payment States"
                ],
                "summary": "Delete a specific payment state",
                "description": "Delete a specific payment state",
                "operationId": "deletePaymentState",
                "parameters": [
                    {
                        "name": "paymentState",
                        "in": "path",
                        "description": "The ID of the payment state to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted payment state",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Payment state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/payment-states\/methods": {
            "get": {
                "tags": [
                    "Payment States"
                ],
                "summary": "List all supported HTTP methods for payment states",
                "description": "Retrieve the list of supported HTTP methods for payment states",
                "operationId": "listMethodsPaymentStates",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsPaymentStatesResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsPaymentStatesResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/price-groups": {
            "get": {
                "tags": [
                    "Price Groups"
                ],
                "summary": "List price groups",
                "description": "Retrieve a paginated list of price groups",
                "operationId": "listPriceGroups",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of price groups",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PriceGroupCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PriceGroupCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Price Groups"
                ],
                "summary": "Create a new price group",
                "description": "Create a new price group",
                "operationId": "createPriceGroup",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PriceGroupStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created price group",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PriceGroupResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PriceGroupResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/price-groups\/{priceGroup}": {
            "get": {
                "tags": [
                    "Price Groups"
                ],
                "summary": "Retrieve details of a specific price group",
                "description": "Retrieve details of a specific price group",
                "operationId": "showPriceGroup",
                "parameters": [
                    {
                        "name": "priceGroup",
                        "in": "path",
                        "description": "The ID of the price group to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved price group details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PriceGroupResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PriceGroupResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Price group not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Price Groups"
                ],
                "summary": "Update an existing price group",
                "description": "Update an existing price group",
                "operationId": "updatePriceGroup",
                "parameters": [
                    {
                        "name": "priceGroup",
                        "in": "path",
                        "description": "The ID of the price group to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PriceGroupUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated price group",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PriceGroupResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PriceGroupResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Price group not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Price Groups"
                ],
                "summary": "Delete a specific price group",
                "description": "Delete a specific price group",
                "operationId": "deletePriceGroup",
                "parameters": [
                    {
                        "name": "priceGroup",
                        "in": "path",
                        "description": "The ID of the price group to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted price group",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Price group not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/price-groups\/methods": {
            "get": {
                "tags": [
                    "Price Groups"
                ],
                "summary": "List all supported HTTP methods for price groups",
                "description": "Retrieve the list of supported HTTP methods for price groups",
                "operationId": "listMethodsPriceGroups",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsPriceGroupsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsPriceGroupsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/promoters": {
            "get": {
                "tags": [
                    "Promoters"
                ],
                "summary": "List promoters",
                "description": "Retrieve a paginated list of promoters",
                "operationId": "listPromoters",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of promoters",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Promoters"
                ],
                "summary": "Create a new promoter",
                "description": "Create a new promoter",
                "operationId": "createPromoter",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PromoterStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created promoter",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/promoters\/{promoter}": {
            "get": {
                "tags": [
                    "Promoters"
                ],
                "summary": "Retrieve details of a specific promoter",
                "description": "Retrieve details of a specific promoter",
                "operationId": "showPromoter",
                "parameters": [
                    {
                        "name": "promoter",
                        "in": "path",
                        "description": "The ID of the promoter to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved promoter details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Promoter not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Promoters"
                ],
                "summary": "Update an existing promoter",
                "description": "Update an existing promoter",
                "operationId": "updatePromoter",
                "parameters": [
                    {
                        "name": "promoter",
                        "in": "path",
                        "description": "The ID of the promoter to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PromoterUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated promoter",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Promoter not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Promoters"
                ],
                "summary": "Delete a specific promoter",
                "description": "Delete a specific promoter",
                "operationId": "deletePromoter",
                "parameters": [
                    {
                        "name": "promoter",
                        "in": "path",
                        "description": "The ID of the promoter to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted promoter",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Promoter not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/promoters\/methods": {
            "get": {
                "tags": [
                    "Promoters"
                ],
                "summary": "List all supported HTTP methods for promoters",
                "description": "Retrieve the list of supported HTTP methods for promoters",
                "operationId": "listMethodsPromoters",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsPromotersResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsPromotersResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/promoter-groups": {
            "get": {
                "tags": [
                    "Promoter Groups"
                ],
                "summary": "List promoter groups",
                "description": "Retrieve a paginated list of promoter groups",
                "operationId": "listPromoterGroups",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of promoter groups",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterGroupCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterGroupCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Promoter Groups"
                ],
                "summary": "Create a new promoter group",
                "description": "Create a new promoter group",
                "operationId": "createPromoterGroup",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PromoterGroupStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created promoter group",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterGroupResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterGroupResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "The specified promoter group does not exist",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/promoter-groups\/{promoterGroup}": {
            "get": {
                "tags": [
                    "Promoter Groups"
                ],
                "summary": "Retrieve details of a specific promoter group",
                "description": "Retrieve details of a specific promoter group",
                "operationId": "showPromoterGroup",
                "parameters": [
                    {
                        "name": "promoterGroup",
                        "in": "path",
                        "description": "The ID of the promoter group to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved promoter group details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterGroupResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterGroupResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "The specified promoter group does not exist",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Promoter Groups"
                ],
                "summary": "Update an existing promoter group",
                "description": "Update an existing promoter group",
                "operationId": "updatePromoterGroup",
                "parameters": [
                    {
                        "name": "promoterGroup",
                        "in": "path",
                        "description": "The ID of the promoter group to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/PromoterGroupUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated promoter group",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterGroupResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterGroupResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "The specified promoter group does not exist",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Promoter Groups"
                ],
                "summary": "Delete a specific promoter group",
                "description": "Delete a specific promoter group",
                "operationId": "destroyPromoterGroup",
                "parameters": [
                    {
                        "name": "promoterGroup",
                        "in": "path",
                        "description": "The ID of the promoter group to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted promoter group",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "The specified promoter group does not exist",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/promoter-groups\/{promoterGroup}\/members": {
            "get": {
                "tags": [
                    "Promoter Groups"
                ],
                "summary": "List members of a promoter group",
                "description": "Retrieve a list of all members of a promoter group",
                "operationId": "listPromoterGroupMembers",
                "parameters": [
                    {
                        "name": "promoterGroup",
                        "in": "path",
                        "description": "The ID of the promoter group to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of members of a promoter group",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/PromoterCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/PromoterCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "The specified promoter group does not exist",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/promoter-groups\/methods": {
            "get": {
                "tags": [
                    "Promoter Groups"
                ],
                "summary": "List all supported HTTP methods for promoter groups",
                "description": "Retrieve the list of supported HTTP methods for promoter groups",
                "operationId": "listMethodsPromoterGroups",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsPromoterGroupsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsPromoterGroupsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/service-areas": {
            "get": {
                "tags": [
                    "ServiceArea"
                ],
                "summary": "List all service areas",
                "description": "Retrieve a paginated list of service areas",
                "operationId": "listServiceAreas",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of service areas",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServiceAreaCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ServiceAreaCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "ServiceArea"
                ],
                "summary": "Create a new service area",
                "description": "Create a new service area",
                "operationId": "createServiceArea",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ServiceAreaStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created service area",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServiceAreaResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ServiceAreaResource"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/service-areas\/{serviceArea}": {
            "get": {
                "tags": [
                    "ServiceArea"
                ],
                "summary": "Get service area details",
                "description": "Retrieve details of a service area",
                "operationId": "showServiceArea",
                "parameters": [
                    {
                        "name": "serviceArea",
                        "in": "path",
                        "description": "The ID of the service area",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved service area details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServiceAreaResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ServiceAreaResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Service area not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "ServiceArea"
                ],
                "summary": "Update service area",
                "description": "Update an existing service area",
                "operationId": "updateServiceArea",
                "parameters": [
                    {
                        "name": "serviceArea",
                        "in": "path",
                        "description": "The ID of the service area to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ServiceAreaUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated service area",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServiceAreaResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/ServiceAreaResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Service area not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "ServiceArea"
                ],
                "summary": "Delete service area",
                "description": "Delete a service area",
                "operationId": "deleteServiceArea",
                "parameters": [
                    {
                        "name": "serviceArea",
                        "in": "path",
                        "description": "The ID of the service area to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted service area",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Service area not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/service-areas\/methods": {
            "get": {
                "tags": [
                    "ServiceArea"
                ],
                "summary": "Get supported HTTP methods",
                "description": "Retrieve supported HTTP methods for service areas",
                "operationId": "listMethodsServiceAreas",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsServiceAreasResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsServiceAreasResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/skills": {
            "get": {
                "tags": [
                    "Skills"
                ],
                "summary": "List skills",
                "description": "Retrieve a paginated list of skills",
                "operationId": "listSkills",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of skills",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/SkillCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/SkillCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Skills"
                ],
                "summary": "Create a skill",
                "description": "Create a new skill",
                "operationId": "createSkill",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/SkillStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created the skill",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/SkillResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/SkillResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/skills\/{skill}": {
            "get": {
                "tags": [
                    "Skills"
                ],
                "summary": "View skill",
                "description": "Retrieve details for a specific skill",
                "operationId": "showSkill",
                "parameters": [
                    {
                        "name": "skill",
                        "in": "path",
                        "description": "The ID of the skill to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the skill details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/SkillResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/SkillResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Skill not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Skills"
                ],
                "summary": "Update skill",
                "description": "Update an existing skill",
                "operationId": "updateSkill",
                "parameters": [
                    {
                        "name": "skill",
                        "in": "path",
                        "description": "The ID of the skill to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/SkillUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated the skill",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/SkillResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/SkillResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Skill not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Skills"
                ],
                "summary": "Delete skill",
                "description": "Delete a specific skill",
                "operationId": "deleteSkill",
                "parameters": [
                    {
                        "name": "skill",
                        "in": "path",
                        "description": "The ID of the skill to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the skill",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Skill not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/skills\/methods": {
            "get": {
                "tags": [
                    "Skills"
                ],
                "summary": "List supported HTTP methods",
                "description": "Retrieve the list of supported HTTP methods for skills",
                "operationId": "listMethodsSkills",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsSkillsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsSkillsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-tracking-channels": {
            "get": {
                "tags": [
                    "TimeTrackingChannels"
                ],
                "summary": "List time tracking channels",
                "description": "Retrieve a paginated list of time tracking channels",
                "operationId": "listTimeTrackingChannels",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        },
                        "example": 15
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of time tracking channels",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingChannelCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingChannelCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TimeTrackingChannels"
                ],
                "summary": "Create time tracking channel",
                "description": "Create a new time tracking channel",
                "operationId": "createTimeTrackingChannel",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/TimeTrackingChannelStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created time tracking channel",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingChannelResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingChannelResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation errors occurred while creating time tracking channel",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-tracking-channels\/{timeTrackingChannel}": {
            "get": {
                "tags": [
                    "TimeTrackingChannels"
                ],
                "summary": "Retrieve a time tracking channel",
                "description": "Retrieve details of a specific time tracking channel",
                "operationId": "showTimeTrackingChannel",
                "parameters": [
                    {
                        "name": "timeTrackingChannel",
                        "in": "path",
                        "description": "The ID of the time tracking channel",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved time tracking channel",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingChannelResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingChannelResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Time tracking channel not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "TimeTrackingChannels"
                ],
                "summary": "Update time tracking channel",
                "description": "Update an existing time tracking channel",
                "operationId": "updateTimeTrackingChannel",
                "parameters": [
                    {
                        "name": "timeTrackingChannel",
                        "in": "path",
                        "description": "The ID of the time tracking channel",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/TimeTrackingChannelUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated time tracking channel",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingChannelResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingChannelResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Time tracking channel not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation errors occurred while updating time tracking channel",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TimeTrackingChannels"
                ],
                "summary": "Delete time tracking channel",
                "description": "Delete a specific time tracking channel",
                "operationId": "deleteTimeTrackingChannel",
                "parameters": [
                    {
                        "name": "timeTrackingChannel",
                        "in": "path",
                        "description": "The ID of the time tracking channel to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted time tracking channel",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Time tracking channel not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-tracking-channels\/methods": {
            "get": {
                "tags": [
                    "TimeTrackingChannels"
                ],
                "summary": "List supported HTTP methods",
                "description": "Retrieve supported HTTP methods for time tracking channels",
                "operationId": "listMethodsTimeTrackingChannels",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-trackings": {
            "get": {
                "tags": [
                    "TimeTrackings"
                ],
                "summary": "List time tracking entries",
                "description": "Retrieve a paginated list of time tracking entries",
                "operationId": "listTimeTrackings",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 15
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of time tracking entries",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "TimeTrackings"
                ],
                "summary": "Create a new time tracking entry",
                "description": "Create a new time tracking entry",
                "operationId": "createTimeTracking",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/TimeTrackingStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "Successfully created time tracking entry",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-trackings\/{timeTracking}": {
            "get": {
                "tags": [
                    "TimeTrackings"
                ],
                "summary": "Retrieve details of a specific time tracking entry",
                "description": "Retrieve details of a specific time tracking entry",
                "operationId": "showTimeTracking",
                "parameters": [
                    {
                        "name": "timeTracking",
                        "in": "path",
                        "description": "The ID of the time tracking entry to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved time tracking entry details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "TimeTrackings"
                ],
                "summary": "Update an existing time tracking entry",
                "description": "Update an existing time tracking entry",
                "operationId": "updateTimeTracking",
                "parameters": [
                    {
                        "name": "timeTracking",
                        "in": "path",
                        "description": "The ID of the time tracking entry to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/TimeTrackingUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated time tracking entry",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TimeTrackings"
                ],
                "summary": "Delete a specific time tracking entry",
                "description": "Delete a specific time tracking entry",
                "operationId": "deleteTimeTracking",
                "parameters": [
                    {
                        "name": "timeTracking",
                        "in": "path",
                        "description": "The ID of the time tracking entry to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted time tracking entry",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Time tracking entry not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-trackings\/methods": {
            "get": {
                "tags": [
                    "TimeTrackings"
                ],
                "summary": "List all supported HTTP methods for time trackings",
                "description": "Retrieve the list of supported HTTP methods for time trackings",
                "operationId": "listMethodsTimeTrackings",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsTimeTrackingsResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsTimeTrackingsResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-tracking-states": {
            "get": {
                "tags": [
                    "TimeTrackingStates"
                ],
                "summary": "List time tracking states",
                "description": "Retrieve a paginated list of time tracking states",
                "operationId": "listTimeTrackingStates",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "example": 10
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of the page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of time tracking states",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingStateCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingStateCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "TimeTrackingStates"
                ],
                "summary": "Create time tracking state",
                "description": "Create a new time tracking state",
                "operationId": "createTimeTrackingState",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/TimeTrackingStateStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created time tracking state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-tracking-states\/{timeTrackingState}": {
            "get": {
                "tags": [
                    "TimeTrackingStates"
                ],
                "summary": "Retrieve time tracking state",
                "description": "Retrieve details of a specific time tracking state",
                "operationId": "showTimeTrackingState",
                "parameters": [
                    {
                        "name": "timeTrackingState",
                        "in": "path",
                        "description": "The ID of the time tracking state to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved time tracking state details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Time tracking state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "TimeTrackingStates"
                ],
                "summary": "Update time tracking state",
                "description": "Update an existing time tracking state",
                "operationId": "updateTimeTrackingState",
                "parameters": [
                    {
                        "name": "timeTrackingState",
                        "in": "path",
                        "description": "The ID of the time tracking state to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/TimeTrackingStateUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated time tracking state",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/TimeTrackingStateResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/TimeTrackingStateResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Time tracking state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "TimeTrackingStates"
                ],
                "summary": "Delete time tracking state",
                "description": "Delete a specific time tracking state",
                "operationId": "deleteTimeTrackingState",
                "parameters": [
                    {
                        "name": "timeTrackingState",
                        "in": "path",
                        "description": "The ID of the time tracking state to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted time tracking state",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "Time tracking state not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/time-tracking-states\/methods": {
            "get": {
                "tags": [
                    "TimeTrackingStates"
                ],
                "summary": "Supported HTTP methods",
                "description": "List all supported HTTP methods for time tracking states",
                "operationId": "listMethodsTimeTrackingStates",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsTimeTrackingStatesResult",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsTimeTrackingStatesResult",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "Retrieve a paginated list of users",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 5
                        },
                        "example": 5
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Number of page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of users",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/UserCollection"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/UserCollection"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                },
                "security": []
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "description": "Create a new user",
                "operationId": "createUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UserStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/UserResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/UserResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/users\/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve user details",
                "description": "Retrieve details of a specific user",
                "operationId": "showUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The ID of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/UserResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/UserResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user details",
                "description": "Update an existing user",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UserUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Successfully updated user",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/UserResource"
                                }
                            }
                        },
                        "x-0": {
                            "$ref": "#\/components\/schemas\/UserResource"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "x-0": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        },
        "\/users\/methods": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List supported HTTP methods",
                "description": "Retrieve the list of supported HTTP methods for users",
                "operationId": "listMethodsUsers",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved supported methods",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "title": "listMethodsUsers",
                                    "properties": {
                                        "methods": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "example": [
                                                "GET",
                                                "POST",
                                                "PUT",
                                                "DELETE"
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "x-0": {
                            "title": "listMethodsUsers",
                            "properties": {
                                "methods": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "GET",
                                        "POST",
                                        "PUT",
                                        "DELETE"
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        "x-1": {
                            "$ref": "#\/components\/responses\/Default"
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "CommitmentStateStoreRequest": {
                "title": "CommitmentStateStoreRequest",
                "description": "Validation rules for creating a commitment state.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the state",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CommitmentStateUpdateRequest": {
                "title": "CommitmentStateUpdateRequest",
                "description": "CommitmentStateUpdateRequest",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the commitment state",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CommitmentStoreRequest": {
                "title": "CommitmentStoreRequest",
                "description": "Validation rules for creating a commitment.",
                "required": [
                    "promoter_id",
                    "event_id",
                    "role",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "promoter_id": {
                        "description": "ID of the promoter",
                        "type": "integer",
                        "example": 1
                    },
                    "event_id": {
                        "description": "ID of the event",
                        "type": "integer",
                        "example": 1
                    },
                    "role": {
                        "description": "Role assigned to the commitment",
                        "type": "string",
                        "example": "Promoter"
                    },
                    "start_time": {
                        "description": "Start time of the commitment",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "end_time": {
                        "description": "End time of the commitment",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "status": {
                        "description": "Status of the commitment",
                        "type": "string",
                        "example": 1,
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "CommitmentUpdateRequest": {
                "title": "CommitmentUpdateRequest",
                "description": "Validation rules for updating a commitment.",
                "required": [
                    "promoter_id",
                    "event_id",
                    "role",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "promoter_id": {
                        "description": "ID of the promoter",
                        "type": "integer",
                        "example": "1"
                    },
                    "event_id": {
                        "description": "ID of the event",
                        "type": "integer",
                        "example": "1"
                    },
                    "role": {
                        "description": "Role assigned to the commitment",
                        "type": "string",
                        "example": "Rollenname"
                    },
                    "start_time": {
                        "description": "Start time of the commitment",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "end_time": {
                        "description": "End time of the commitment",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "status": {
                        "description": "Status of the commitment",
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ContactPersonStoreRequest": {
                "title": "ContactPersonStoreRequest",
                "description": "Request body for storing a contact person",
                "required": [
                    "name",
                    "email",
                    "phone",
                    "location_id",
                    "role"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the contact person",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the contact person",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "Phone number of the contact person",
                        "type": "string"
                    },
                    "location_id": {
                        "description": "ID of the location",
                        "type": "integer"
                    },
                    "role": {
                        "description": "Role of the contact person",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ContactPersonUpdateRequest": {
                "title": "ContactPersonUpdateRequest",
                "description": "The request schema for updating contact person information",
                "required": [
                    "name",
                    "email",
                    "phone",
                    "location_id",
                    "role"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the contact person",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the contact person",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "The phone number of the contact person",
                        "type": "string"
                    },
                    "location_id": {
                        "description": "The location ID of the contact person",
                        "type": "integer"
                    },
                    "role": {
                        "description": "The role of the contact person",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CountryStoreRequest": {
                "title": "CountryStoreRequest",
                "description": "CountryStoreRequest",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the country",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CountryUpdateRequest": {
                "title": "CountryUpdateRequest",
                "description": "CountryUpdateRequest",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the country",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CustomerStoreRequest": {
                "title": "CustomerStoreRequest",
                "description": "Validation rules for storing a customer.",
                "required": [
                    "name",
                    "company_name",
                    "email",
                    "phone",
                    "vat_number"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the customer",
                        "type": "string"
                    },
                    "company_name": {
                        "description": "Company name of the customer",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the customer",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "Phone number of the customer",
                        "type": "string"
                    },
                    "address_line_1": {
                        "description": "Address line 1 of the customer",
                        "type": "string",
                        "nullable": true
                    },
                    "address_line_2": {
                        "description": "Address line 2 of the customer",
                        "type": "string",
                        "nullable": true
                    },
                    "post_code": {
                        "description": "Postal code of the customer",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "City of the customer",
                        "type": "string",
                        "nullable": true
                    },
                    "country": {
                        "description": "Country of the customer",
                        "type": "string",
                        "nullable": true
                    },
                    "vat_number": {
                        "description": "VAT number of the customer",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CustomerUpdateRequest": {
                "title": "CustomerUpdateRequest",
                "description": "Validation rules for updating a customer.",
                "required": [
                    "name",
                    "company_name",
                    "email",
                    "phone",
                    "vat_number"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the customer",
                        "type": "string"
                    },
                    "company_name": {
                        "description": "The company name",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the customer",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "The phone number of the customer",
                        "type": "string"
                    },
                    "address_line_1": {
                        "description": "The first line of the address (optional)",
                        "type": "string",
                        "nullable": true
                    },
                    "address_line_2": {
                        "description": "The second line of the address (optional)",
                        "type": "string",
                        "nullable": true
                    },
                    "post_code": {
                        "description": "The postal code (optional)",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "The city of the customer (optional)",
                        "type": "string",
                        "nullable": true
                    },
                    "country": {
                        "description": "The country of the customer (optional)",
                        "type": "string",
                        "nullable": true
                    },
                    "vat_number": {
                        "description": "The VAT number of the customer",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DepartmentStoreRequest": {
                "title": "DepartmentStoreRequest",
                "description": "The request schema for storing a department",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the department",
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "type": "object"
            },
            "DepartmentUpdateRequest": {
                "title": "DepartmentUpdateRequest",
                "description": "DepartmentUpdateRequest",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the department",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmployeeStoreRequest": {
                "title": "EmployeeStoreRequest",
                "description": "Validation rules for storing employees.",
                "required": [
                    "first_name",
                    "last_name",
                    "email"
                ],
                "properties": {
                    "first_name": {
                        "description": "The first name of the employee",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the employee",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the employee",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "The phone number of the employee",
                        "type": "string",
                        "nullable": true
                    },
                    "address_line_1": {
                        "description": "The first line of the address",
                        "type": "string",
                        "nullable": true
                    },
                    "address_line_2": {
                        "description": "The second line of the address",
                        "type": "string",
                        "nullable": true
                    },
                    "post_code": {
                        "description": "The postal code of the employee",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "The city where the employee resides",
                        "type": "string",
                        "nullable": true
                    },
                    "country": {
                        "description": "The country of residence",
                        "type": "string",
                        "nullable": true
                    },
                    "hire_date": {
                        "description": "The hire date for the employee",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "birth_date": {
                        "description": "The birth date of the employee",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "gender": {
                        "description": "The gender of the employee",
                        "type": "string",
                        "nullable": true
                    },
                    "position": {
                        "description": "The position of the employee",
                        "type": "string",
                        "nullable": true
                    },
                    "department_id": {
                        "description": "The department ID for the employee",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "EmployeeUpdateRequest": {
                "title": "EmployeeUpdateRequest",
                "description": "Validation rules for updating employees.",
                "required": [
                    "first_name",
                    "last_name",
                    "email"
                ],
                "properties": {
                    "first_name": {
                        "description": "The first name of the employee",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the employee",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the employee",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "The phone number of the employee",
                        "type": "string",
                        "nullable": true
                    },
                    "address_line_1": {
                        "description": "The first address line",
                        "type": "string",
                        "nullable": true
                    },
                    "address_line_2": {
                        "description": "The second address line",
                        "type": "string",
                        "nullable": true
                    },
                    "post_code": {
                        "description": "The postal code",
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "description": "The city",
                        "type": "string",
                        "nullable": true
                    },
                    "country": {
                        "description": "The country",
                        "type": "string",
                        "nullable": true
                    },
                    "hire_date": {
                        "description": "The hire date",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "birth_date": {
                        "description": "The birth date",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "gender": {
                        "description": "The gender of the employee",
                        "type": "string",
                        "nullable": true
                    },
                    "position": {
                        "description": "The position of the employee",
                        "type": "string",
                        "nullable": true
                    },
                    "department_id": {
                        "description": "The ID of the department",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "EventStateStoreRequest": {
                "title": "EventStateStoreRequest",
                "description": "Validation rules for creating an event state.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the event state",
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "type": "object"
            },
            "EventStateUpdateRequest": {
                "title": "EventStateUpdateRequest",
                "description": "EventStateUpdateRequest",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the event state",
                        "type": "string",
                        "maxLength": 255
                    }
                },
                "type": "object"
            },
            "EventStoreRequest": {
                "title": "EventStoreRequest",
                "description": "Validation rules for creating an event.",
                "required": [
                    "name",
                    "date",
                    "location_id",
                    "organizer",
                    "budget"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the event",
                        "type": "string",
                        "maxLength": 255
                    },
                    "date": {
                        "description": "The date of the event, must be today or later",
                        "type": "string",
                        "format": "date"
                    },
                    "location_id": {
                        "description": "The ID of the location",
                        "type": "integer"
                    },
                    "organizer": {
                        "description": "The organizer's name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "budget": {
                        "description": "The budget for the event, must be at least 0",
                        "type": "number",
                        "format": "float"
                    },
                    "status": {
                        "description": "The ID of the event status",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "EventUpdateRequest": {
                "title": "EventUpdateRequest",
                "description": "Validation rules for updating an event.",
                "required": [
                    "name",
                    "date",
                    "location_id",
                    "organizer",
                    "budget"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the event",
                        "type": "string",
                        "maxLength": 255
                    },
                    "date": {
                        "description": "The date of the event, must be today or later",
                        "type": "string",
                        "format": "date"
                    },
                    "location_id": {
                        "description": "The ID of the location",
                        "type": "integer"
                    },
                    "organizer": {
                        "description": "The organizer's name",
                        "type": "string",
                        "maxLength": 255
                    },
                    "budget": {
                        "description": "The budget for the event, must be at least 0",
                        "type": "number",
                        "format": "float"
                    },
                    "status": {
                        "description": "The ID of the event status",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "GenderStoreRequest": {
                "title": "GenderStoreRequest",
                "description": "Validation rules for storing genders",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the gender",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GenderUpdateRequest": {
                "title": "GenderUpdateRequest",
                "description": "Rulers for updating gender",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the gender",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InventoryConditionStoreRequest": {
                "title": "InventoryConditionStoreRequest",
                "description": "Rules for storing inventory conditions.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the inventory condition",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InventoryConditionUpdateRequest": {
                "title": "InventoryConditionUpdateRequest",
                "description": "Rules for updating inventory conditions.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the inventory condition",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InventoryStoreRequest": {
                "title": "InventoryStoreRequest",
                "description": "Validation rules for creating an inventory item.",
                "required": [
                    "name",
                    "type",
                    "quantity",
                    "available",
                    "condition",
                    "price",
                    "rental_price"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the inventory item",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the inventory item",
                        "type": "string"
                    },
                    "quantity": {
                        "description": "The quantity available",
                        "type": "integer"
                    },
                    "available": {
                        "description": "Availability status of the item",
                        "type": "boolean"
                    },
                    "condition": {
                        "description": "Condition of the inventory item",
                        "type": "integer"
                    },
                    "price": {
                        "description": "Price of the inventory item",
                        "type": "string"
                    },
                    "rental_price": {
                        "description": "Rental price of the inventory item",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InventoryUpdateRequest": {
                "title": "InventoryUpdateRequest",
                "required": [
                    "name",
                    "type",
                    "quantity",
                    "available",
                    "condition",
                    "price",
                    "rental_price"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the inventory item",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type or category of the inventory item",
                        "type": "string"
                    },
                    "quantity": {
                        "description": "The quantity of the inventory item",
                        "type": "string"
                    },
                    "available": {
                        "description": "The availability status of the inventory item",
                        "type": "boolean"
                    },
                    "condition": {
                        "description": "The condition of the inventory item (e.g., new, used)",
                        "type": "integer"
                    },
                    "price": {
                        "description": "The price of the inventory item",
                        "type": "string"
                    },
                    "rental_price": {
                        "description": "The rental price of the inventory item",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InvoiceStoreRequest": {
                "title": "InvoideStoreRequest",
                "description": "Request body for storing invoices",
                "required": [
                    "offer_id",
                    "customer_id",
                    "issue_date",
                    "due_date",
                    "total_amount",
                    "payment_status"
                ],
                "properties": {
                    "offer_id": {
                        "description": "ID of the associated offer",
                        "type": "integer"
                    },
                    "customer_id": {
                        "description": "ID of the customer",
                        "type": "integer"
                    },
                    "issue_date": {
                        "description": "Issue date of the invoice",
                        "type": "string",
                        "format": "date"
                    },
                    "due_date": {
                        "description": "Due date of the invoice",
                        "type": "string",
                        "format": "date"
                    },
                    "total_amount": {
                        "description": "Total amount of the invoice",
                        "type": "number",
                        "format": "float"
                    },
                    "payment_status": {
                        "description": "Payment status of the invoice",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "InvoiceUpdateRequest": {
                "title": "InvoiceUpdateRequest",
                "description": "Request body for updating invoices",
                "required": [
                    "offer_id",
                    "customer_id",
                    "issue_date",
                    "due_date",
                    "total_amount",
                    "payment_status"
                ],
                "properties": {
                    "offer_id": {
                        "description": "ID of the related offer",
                        "type": "integer"
                    },
                    "customer_id": {
                        "description": "ID of the customer",
                        "type": "integer"
                    },
                    "issue_date": {
                        "description": "The issue date of the invoice",
                        "type": "string",
                        "format": "date"
                    },
                    "due_date": {
                        "description": "The due date for payment",
                        "type": "string",
                        "format": "date"
                    },
                    "total_amount": {
                        "description": "The total amount of the invoice",
                        "type": "number"
                    },
                    "payment_status": {
                        "description": "Payment status of the invoice",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LocationStoreRequest": {
                "title": "LocationStoreRequest",
                "description": "The request schema for storing a location",
                "required": [
                    "name",
                    "address",
                    "city",
                    "country",
                    "postal_code",
                    "capacity"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the location",
                        "type": "string"
                    },
                    "address": {
                        "description": "The address of the location",
                        "type": "string"
                    },
                    "city": {
                        "description": "The city of the location",
                        "type": "string"
                    },
                    "country": {
                        "description": "The ID of the country",
                        "type": "integer"
                    },
                    "postal_code": {
                        "description": "The postal code of the location",
                        "type": "string"
                    },
                    "capacity": {
                        "description": "The capacity of the location",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LocationUpdateRequest": {
                "title": "LocationUpdateRequest",
                "description": "The request schema for updating a location",
                "required": [
                    "name",
                    "address",
                    "city",
                    "country",
                    "postal_code",
                    "capacity"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the location",
                        "type": "string"
                    },
                    "address": {
                        "description": "The address of the location",
                        "type": "string"
                    },
                    "city": {
                        "description": "The city where the location is",
                        "type": "string"
                    },
                    "country": {
                        "description": "The ID of the country",
                        "type": "integer"
                    },
                    "postal_code": {
                        "description": "The postal code of the location",
                        "type": "string"
                    },
                    "capacity": {
                        "description": "The capacity of the location",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "OccupationStoreRequest": {
                "title": "OccupationStoreRequest",
                "description": "Request body for storing new occupations",
                "required": [
                    "name",
                    "description",
                    "required_skills",
                    "hourly_rate"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the occupation",
                        "type": "string"
                    },
                    "description": {
                        "description": "Detailed description of the occupation",
                        "type": "string"
                    },
                    "required_skills": {
                        "description": "Skills needed for the occupation",
                        "type": "string"
                    },
                    "hourly_rate": {
                        "description": "Hourly rate for the occupation",
                        "type": "number",
                        "format": "float"
                    },
                    "event": {
                        "description": "Optional event associated with the occupation",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "OccupationUpdateRequest": {
                "title": "OccupationUpdateRequest",
                "description": "Request body for updating occupations",
                "required": [
                    "name",
                    "description",
                    "required_skills",
                    "hourly_rate"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the occupation",
                        "type": "string"
                    },
                    "description": {
                        "description": "A brief description of the occupation",
                        "type": "string"
                    },
                    "required_skills": {
                        "description": "Skills required for the occupation",
                        "type": "string"
                    },
                    "hourly_rate": {
                        "description": "The hourly rate for the occupation",
                        "type": "number",
                        "format": "float"
                    },
                    "event": {
                        "description": "The ID of the associated event (nullable)",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "OfferStateStoreRequest": {
                "title": "OfferStateStoreRequest",
                "description": "Validation rules for storing offer states",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the offer state",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OfferStateUpdateRequest": {
                "title": "OfferStateUpdateRequest",
                "description": "Rules for updating offer states.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the offer state",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OfferStoreRequest": {
                "title": "OfferStoreRequest",
                "description": "Validation rules for creating an offer.",
                "required": [
                    "event_id",
                    "customer_id",
                    "description",
                    "total_price"
                ],
                "properties": {
                    "event_id": {
                        "description": "The ID of the event",
                        "type": "integer"
                    },
                    "customer_id": {
                        "description": "The ID of the customer",
                        "type": "integer"
                    },
                    "description": {
                        "description": "Description of the offer",
                        "type": "string"
                    },
                    "total_price": {
                        "description": "Total price of the offer",
                        "type": "number",
                        "format": "float"
                    },
                    "status": {
                        "description": "Status of the offer",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "OfferUpdateRequest": {
                "title": "OfferUpdateRequest",
                "description": "Validation rules for updating an offer.",
                "required": [
                    "event_id",
                    "customer_id",
                    "description",
                    "total_price"
                ],
                "properties": {
                    "event_id": {
                        "description": "The ID of the related event",
                        "type": "integer"
                    },
                    "customer_id": {
                        "description": "The ID of the related customer",
                        "type": "integer"
                    },
                    "description": {
                        "description": "The description of the offer",
                        "type": "string"
                    },
                    "total_price": {
                        "description": "The total price of the offer",
                        "type": "number",
                        "format": "float"
                    },
                    "status": {
                        "description": "The current status of the offer",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "PaymentStateStoreRequest": {
                "title": "PaymentStateStoreRequest",
                "description": "Rules for storing payment states.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the payment state",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PaymentStateUpdateRequest": {
                "title": "PaymentStateUpdateRequest",
                "description": "Rules for updating payment state",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the payment state",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PermissionStoreRequest": {
                "title": "PermissionStoreRequest",
                "description": "Validation rules for storing permissions",
                "required": [
                    "name",
                    "description"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the permission",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the permission",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PermissionUpdateRequest": {
                "title": "PermissionUpdateRequest",
                "description": "Validation rules for updating permissions",
                "required": [
                    "name",
                    "description"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the permission",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the permission",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PriceGroupStoreRequest": {
                "title": "PriceGroupStoreRequest",
                "description": "Rules for storing price groups.",
                "required": [
                    "name",
                    "description",
                    "discount",
                    "currency"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the price group",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the price group",
                        "type": "string"
                    },
                    "discount": {
                        "description": "The discount for the price group",
                        "type": "string"
                    },
                    "currency": {
                        "description": "The currency identifier for the price group",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PriceGroupUpdateRequest": {
                "title": "PriceGroupUpdateRequest",
                "description": "Validation rules for updating price groups",
                "required": [
                    "name",
                    "description",
                    "discount",
                    "currency"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the price group",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the price group",
                        "type": "string"
                    },
                    "discount": {
                        "description": "Discount rate for the price group",
                        "type": "string"
                    },
                    "currency": {
                        "description": "Currency of the price group",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PromoterGroupStoreRequest": {
                "title": "PromoterGroupStoreRequest",
                "description": "Validation rules for storing promoter groups",
                "required": [
                    "name",
                    "skills",
                    "description",
                    "max_members"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the promoter group",
                        "type": "string"
                    },
                    "skills": {
                        "description": "Skills associated with the promoter group",
                        "type": "array",
                        "items": {
                            "title": "PromoterGroupStoreRequestSkillItems",
                            "type": "integer"
                        }
                    },
                    "description": {
                        "description": "A detailed description of the group",
                        "type": "string"
                    },
                    "max_members": {
                        "description": "Maximum number of members in the group",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PromoterGroupUpdateRequest": {
                "title": "PromoterGroupUpdateRequest",
                "description": "PromoterGroupUpdateRequest",
                "required": [
                    "name",
                    "skills",
                    "description",
                    "max_members"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the promoter group",
                        "type": "string"
                    },
                    "skills": {
                        "description": "Skills associated with the promoter group",
                        "type": "array",
                        "items": {
                            "title": "PromoterGroupUpdateRequestSkillItems",
                            "type": "integer"
                        }
                    },
                    "description": {
                        "description": "Description of the promoter group",
                        "type": "string"
                    },
                    "max_members": {
                        "description": "Maximum number of members in the promoter group",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PromoterStoreRequest": {
                "title": "PromoterStoreRequest",
                "description": "Validation rules for storing promoters",
                "required": [
                    "employee_id",
                    "promoter_group_id",
                    "name",
                    "email",
                    "phone",
                    "skills",
                    "certifications",
                    "availability"
                ],
                "properties": {
                    "employee_id": {
                        "description": "ID of the employee",
                        "type": "integer"
                    },
                    "promoter_group_id": {
                        "description": "ID of the promoter group",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the promoter",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the promoter",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "Phone number of the promoter",
                        "type": "string"
                    },
                    "skills": {
                        "description": "Skills of the promoter",
                        "type": "string"
                    },
                    "certifications": {
                        "description": "Certifications of the promoter",
                        "type": "string"
                    },
                    "availability": {
                        "description": "Availability of the promoter",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PromoterUpdateRequest": {
                "title": "PromoterUpdateRequest",
                "description": "Validation rules for updating promoters",
                "required": [
                    "employee_id",
                    "promoter_group_id",
                    "name",
                    "email",
                    "phone",
                    "skills",
                    "certifications",
                    "availability"
                ],
                "properties": {
                    "employee_id": {
                        "description": "ID of the employee",
                        "type": "integer"
                    },
                    "promoter_group_id": {
                        "description": "ID of the promoter group",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the promoter",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address of the promoter",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "Contact phone number of the promoter",
                        "type": "string"
                    },
                    "skills": {
                        "description": "Skills of the promoter",
                        "type": "string"
                    },
                    "certifications": {
                        "description": "Certifications of the promoter",
                        "type": "string"
                    },
                    "availability": {
                        "description": "Availability of the promoter",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ServiceAreaStoreRequest": {
                "title": "ServiceAreaStoreRequest",
                "description": "Validation rules for creating a service area.",
                "required": [
                    "name",
                    "description"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the service area",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the service area",
                        "type": "string"
                    },
                    "parent_area_id": {
                        "description": "The parent area ID, if applicable",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ServiceAreaUpdateRequest": {
                "title": "ServiceAreaUpdateRequest",
                "description": "Validation rules for updating a service area.",
                "required": [
                    "name",
                    "description"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the service area",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the service area",
                        "type": "string"
                    },
                    "parent_area_id": {
                        "description": "The ID of the parent area, if applicable",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "SkillStoreRequest": {
                "title": "SkillStoreRequest",
                "description": "Validation rules for storing skills",
                "required": [
                    "name",
                    "description",
                    "category",
                    "required_certification"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the skill",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the skill",
                        "type": "string"
                    },
                    "category": {
                        "description": "The category of the skill",
                        "type": "string"
                    },
                    "required_certification": {
                        "description": "The required certification for the skill",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SkillUpdateRequest": {
                "title": "SkillUpdateRequest",
                "description": "Rules for updating skills",
                "required": [
                    "name",
                    "description",
                    "category",
                    "required_certification"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the skill",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the skill",
                        "type": "string"
                    },
                    "category": {
                        "description": "The category of the skill",
                        "type": "string"
                    },
                    "required_certification": {
                        "description": "The required certification for the skill",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TimeTrackingChannelStoreRequest": {
                "title": "TimeTrackingChannelStoreRequest",
                "description": "Validation rules for creating a time tracking channel.",
                "required": [
                    "name",
                    "active"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the time tracking channel",
                        "type": "string"
                    },
                    "description": {
                        "description": "A short description of the time tracking channel",
                        "type": "string",
                        "nullable": true
                    },
                    "active": {
                        "description": "Whether the channel is active",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "TimeTrackingChannelUpdateRequest": {
                "title": "TimeTrackingChannelUpdateRequest",
                "description": "Validation rules for updating a time tracking channel.",
                "required": [
                    "name",
                    "active"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the time tracking channel",
                        "type": "string",
                        "example": "Channel Name"
                    },
                    "description": {
                        "description": "The description of the time tracking channel",
                        "type": "string",
                        "example": "A description of the channel",
                        "nullable": true
                    },
                    "active": {
                        "description": "The active status of the time tracking channel",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "TimeTrackingStateStoreRequest": {
                "title": "TimeTrackingStateStoreRequest",
                "description": "Validation rules for creating a time tracking state.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the time tracking state",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the time tracking state",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "TimeTrackingStateUpdateRequest": {
                "title": "TimeTrackingStateUpdateRequest",
                "description": "Validation rules for updating a time tracking state.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the time tracking state",
                        "type": "string",
                        "example": "In Progress"
                    },
                    "description": {
                        "description": "Description of the time tracking state",
                        "type": "string",
                        "example": "State description",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "TimeTrackingStoreRequest": {
                "title": "TimeTrackingStoreRequest",
                "description": "Validation rules for creating a time tracking entry.",
                "required": [
                    "employee_id",
                    "commitment_id",
                    "time_tracking_channel_id",
                    "time_tracking_state_id",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "employee_id": {
                        "description": "The ID of the employee",
                        "type": "integer"
                    },
                    "commitment_id": {
                        "description": "The ID of the commitment",
                        "type": "integer"
                    },
                    "time_tracking_channel_id": {
                        "description": "The ID of the time tracking channel",
                        "type": "integer"
                    },
                    "time_tracking_state_id": {
                        "description": "The ID of the time tracking state",
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "The start time of the tracking (in datetime format)",
                        "type": "string",
                        "format": "datetime"
                    },
                    "end_time": {
                        "description": "The end time of the tracking (in datetime format)",
                        "type": "string",
                        "format": "datetime"
                    }
                },
                "type": "object"
            },
            "TimeTrackingUpdateRequest": {
                "title": "TimeTrackingUpdateRequest",
                "description": "Validation rules for updating a time tracking entry.",
                "required": [
                    "employee_id",
                    "commitment_id",
                    "time_tracking_channel_id",
                    "time_tracking_state_id",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "employee_id": {
                        "description": "ID of the employee",
                        "type": "integer",
                        "example": 1
                    },
                    "commitment_id": {
                        "description": "ID of the commitment",
                        "type": "integer",
                        "example": 1
                    },
                    "time_tracking_channel_id": {
                        "description": "ID of the time tracking channel",
                        "type": "integer",
                        "example": 1
                    },
                    "time_tracking_state_id": {
                        "description": "ID of the time tracking state",
                        "type": "integer",
                        "example": 1
                    },
                    "start_time": {
                        "description": "Start time of the time tracking entry",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-01-01T00:00:00+00:00"
                    },
                    "end_time": {
                        "description": "End time of the time tracking entry",
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-01-01T01:00:00+00:00"
                    }
                },
                "type": "object"
            },
            "UserStoreRequest": {
                "title": "UserStoreRequest",
                "description": "Validation rules for storing users",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "description": "The name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the user",
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "description": "The password for the user (minimum of 8 characters)",
                        "type": "string",
                        "minLength": 8
                    }
                },
                "type": "object"
            },
            "UserUpdateRequest": {
                "title": "UserUpdateRequest",
                "description": "validation rules for updating users",
                "required": [
                    "name",
                    "email"
                ],
                "properties": {
                    "name": {
                        "description": "The full name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the user",
                        "type": "string",
                        "format": "email"
                    }
                },
                "type": "object"
            },
            "CommitmentCollection": {
                "title": "CommitmentCollection",
                "description": "A collection of commitment resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of commitment resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CommitmentResource"
                        }
                    }
                },
                "type": "object"
            },
            "CommitmentResource": {
                "title": "CommitmentResource",
                "description": "Represents a commitment",
                "required": [
                    "id",
                    "promoter_id",
                    "event_id",
                    "role",
                    "start_time",
                    "end_time",
                    "status"
                ],
                "properties": {
                    "id": {
                        "description": "The commitment ID",
                        "type": "integer",
                        "example": 1
                    },
                    "promoter_id": {
                        "description": "The ID of the promoter",
                        "type": "integer",
                        "example": 1
                    },
                    "promoter": {
                        "$ref": "#\/components\/schemas\/PromoterResource"
                    },
                    "event_id": {
                        "description": "The ID of the event",
                        "type": "integer",
                        "example": 1
                    },
                    "event": {
                        "$ref": "#\/components\/schemas\/EventResource"
                    },
                    "role": {
                        "description": "The role assigned in the commitment",
                        "type": "string"
                    },
                    "start_time": {
                        "description": "The start time of the commitment",
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "description": "The end time of the commitment",
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "description": "The current status of the commitment",
                        "type": "number",
                        "example": 1
                    },
                    "state": {
                        "$ref": "#\/components\/schemas\/CommitmentStateResource"
                    }
                },
                "type": "object"
            },
            "CommitmentStateCollection": {
                "title": "CommitmentStateCollection",
                "description": "A collection of commitment state resources",
                "properties": {
                    "data": {
                        "description": "Represents a collection of commitment state resources",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CommitmentStateResource"
                        }
                    }
                },
                "type": "object"
            },
            "CommitmentStateResource": {
                "title": "CommitmentStateResource",
                "description": "Represents a commitment state",
                "properties": {
                    "id": {
                        "description": "The ID of the commitment",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the commitment",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ContactPersonCollection": {
                "title": "ContactPersonCollection",
                "description": "A collection of contact person resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of contact person resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/ContactPersonResource"
                        }
                    }
                },
                "type": "object"
            },
            "ContactPersonResource": {
                "title": "ContactPersonResource",
                "description": "Represents a contact person",
                "required": [
                    "id",
                    "name",
                    "email",
                    "phone",
                    "location_id",
                    "role"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier of the contact person",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the contact person",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the contact person",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "The phone number of the contact person",
                        "type": "string"
                    },
                    "location_id": {
                        "description": "The location associated with the contact person",
                        "type": "integer"
                    },
                    "role": {
                        "description": "The role of the contact person",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the contact person was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the contact person was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CountryCollection": {
                "title": "CountryCollection",
                "description": "A collection of country resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of country resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CountryResource"
                        }
                    }
                },
                "type": "object"
            },
            "CountryResource": {
                "title": "CountryResource",
                "description": "Represents a country",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the country",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the country",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the country was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the country was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CustomerCollection": {
                "title": "CustomerCollection",
                "description": "A collection of customer resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of customer resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CustomerResource"
                        }
                    }
                },
                "type": "object"
            },
            "CustomerResource": {
                "title": "CustomerResource",
                "description": "Represents a customer",
                "required": [
                    "id",
                    "name",
                    "company_name",
                    "email"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the customer",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the customer",
                        "type": "string"
                    },
                    "company_name": {
                        "description": "The customer's company name",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the customer",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The phone number of the customer",
                        "type": "string"
                    },
                    "address_line_1": {
                        "description": "Primary address line of the customer",
                        "type": "string"
                    },
                    "address_line_2": {
                        "description": "Secondary address line of the customer",
                        "type": "string"
                    },
                    "post_code": {
                        "description": "Postcode of the customer's address",
                        "type": "string"
                    },
                    "city": {
                        "description": "City of the customer",
                        "type": "string"
                    },
                    "country": {
                        "description": "Country of the customer",
                        "type": "string"
                    },
                    "vat_number": {
                        "description": "VAT number of the customer",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the customer was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the customer was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "DepartmentCollection": {
                "title": "DepartmentCollection",
                "description": "A collection of department resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of department resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/DepartmentResource"
                        }
                    }
                },
                "type": "object"
            },
            "DepartmentResource": {
                "title": "DepartmentResource",
                "description": "Represents a department",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the department",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the department",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the department was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the department was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "EmployeeCollection": {
                "title": "EmployeeCollection",
                "description": "A collection of employee resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of employee resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EmployeeResource"
                        }
                    }
                },
                "type": "object"
            },
            "EmployeeResource": {
                "title": "EmployeeResource",
                "description": "Represents an employee",
                "required": [
                    "id",
                    "first_name",
                    "last_name",
                    "email",
                    "department_id"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the employee",
                        "type": "integer"
                    },
                    "first_name": {
                        "description": "The first name of the employee",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the employee",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address of the employee",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The phone number of the employee",
                        "type": "string"
                    },
                    "address_line_1": {
                        "description": "The primary address line of the employee",
                        "type": "string"
                    },
                    "address_line_2": {
                        "description": "The secondary address line of the employee",
                        "type": "string"
                    },
                    "post_code": {
                        "description": "The postal code of the employee's address",
                        "type": "string"
                    },
                    "city": {
                        "description": "The city of the employee's address",
                        "type": "string"
                    },
                    "country": {
                        "description": "The country of the employee's address",
                        "type": "string"
                    },
                    "hire_date": {
                        "description": "The hire date of the employee",
                        "type": "string",
                        "format": "date"
                    },
                    "birth_date": {
                        "description": "The birth date of the employee",
                        "type": "string",
                        "format": "date"
                    },
                    "gender": {
                        "description": "The gender of the employee",
                        "type": "string"
                    },
                    "position": {
                        "description": "The position of the employee",
                        "type": "string"
                    },
                    "department_id": {
                        "description": "The ID of the department the employee belongs to",
                        "type": "integer"
                    },
                    "salary": {
                        "description": "The salary of the employee",
                        "type": "number",
                        "format": "float"
                    },
                    "created_at": {
                        "description": "Timestamp when the employee record was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the employee record was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "EventCollection": {
                "title": "EventCollection",
                "description": "A collection of events.",
                "properties": {
                    "data": {
                        "description": "Class EventCollection\n\nThis resource collection handles the transformation of event data into an array,\nsuitable for API responses, and includes OpenAPI documentation for the schema.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EventResource"
                        }
                    }
                },
                "type": "object"
            },
            "EventResource": {
                "title": "EventResource",
                "description": "Represents an event",
                "required": [
                    "id",
                    "name",
                    "date",
                    "location_id"
                ],
                "properties": {
                    "id": {
                        "description": "The event ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the event",
                        "type": "string"
                    },
                    "date": {
                        "description": "The date of the event",
                        "type": "string",
                        "format": "date-time"
                    },
                    "location_id": {
                        "description": "The ID of the location where the event takes place",
                        "type": "integer"
                    },
                    "organizer": {
                        "description": "The organizer of the event",
                        "type": "string"
                    },
                    "budget": {
                        "description": "The budget allocated for the event",
                        "type": "number",
                        "format": "float"
                    },
                    "status": {
                        "description": "The current status of the event",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the event was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the event was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "EventStateCollection": {
                "title": "EventStateCollection",
                "description": "A collection of event states.",
                "properties": {
                    "data": {
                        "description": "Class EventStateCollection\n\nThis resource collection handles the transformation of event state data into an array,\nsuitable for API responses, and includes OpenAPI documentation for the schema.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EventStateResource"
                        }
                    }
                },
                "type": "object"
            },
            "EventStateResource": {
                "title": "EventStateResource",
                "description": "Represents a event state resource",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the event state",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the event state",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the event state was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the event state was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "GenderCollection": {
                "title": "GenderCollection",
                "description": "A collection of gender resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of gender resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/GenderResource"
                        }
                    }
                },
                "type": "object"
            },
            "GenderResource": {
                "title": "GenderResource",
                "description": "Represents a gender",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The gender ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the gender",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InventoryCollection": {
                "title": "InventoryCollection",
                "description": "A collection of inventory resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of inventory resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/InventoryResource"
                        }
                    }
                },
                "type": "object"
            },
            "InventoryConditionCollection": {
                "title": "InventoryConditionCollection",
                "description": "A collection of inventory condition resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of inventory condition resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/InventoryConditionResource"
                        }
                    }
                },
                "type": "object"
            },
            "InventoryConditionResource": {
                "title": "InventoryConditionResource",
                "description": "Represents an inventory condition",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the inventory condition",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the inventory condition",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the inventory condition was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the inventory condition was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "InventoryResource": {
                "title": "InventoryResource",
                "description": "Represents an inventory item",
                "required": [
                    "id",
                    "name",
                    "type",
                    "quantity",
                    "available",
                    "condition"
                ],
                "properties": {
                    "id": {
                        "description": "The inventory ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the inventory item",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the inventory item",
                        "type": "string"
                    },
                    "quantity": {
                        "description": "The quantity of the inventory item",
                        "type": "integer"
                    },
                    "available": {
                        "description": "The availability status of the inventory",
                        "type": "boolean"
                    },
                    "condition": {
                        "description": "The condition of the inventory item",
                        "type": "string"
                    },
                    "price": {
                        "description": "The purchase price of the inventory item",
                        "type": "number",
                        "format": "float"
                    },
                    "rental_price": {
                        "description": "The rental price of the inventory item",
                        "type": "number",
                        "format": "float"
                    },
                    "created_at": {
                        "description": "Timestamp when the inventory item was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the inventory item was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "InvoiceCollection": {
                "title": "InvoiceCollection",
                "description": "A collection of invoice resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of invoice resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/InvoiceResource"
                        }
                    }
                },
                "type": "object"
            },
            "InvoiceResource": {
                "title": "InvoiceResource",
                "description": "Represents an invoice",
                "required": [
                    "id",
                    "offer_id",
                    "customer_id",
                    "issue_date",
                    "due_date",
                    "total_amount",
                    "payment_status"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the invoice",
                        "type": "integer"
                    },
                    "offer_id": {
                        "description": "The ID of the associated offer",
                        "type": "integer"
                    },
                    "customer_id": {
                        "description": "The ID of the customer",
                        "type": "integer"
                    },
                    "issue_date": {
                        "description": "The issue date of the invoice",
                        "type": "string",
                        "format": "date-time"
                    },
                    "due_date": {
                        "description": "The due date of the invoice",
                        "type": "string",
                        "format": "date-time"
                    },
                    "total_amount": {
                        "description": "The total amount of the invoice",
                        "type": "number",
                        "format": "float"
                    },
                    "payment_status": {
                        "description": "The payment status of the invoice",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the invoice was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the invoice was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "LocationCollection": {
                "title": "LocationCollection",
                "description": "A collection of location resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of location resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/LocationResource"
                        }
                    }
                },
                "type": "object"
            },
            "LocationResource": {
                "title": "LocationResource",
                "description": "Represents a location",
                "required": [
                    "id",
                    "name",
                    "address",
                    "city",
                    "country",
                    "postal_code",
                    "capacity"
                ],
                "properties": {
                    "id": {
                        "description": "The location ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the location",
                        "type": "string"
                    },
                    "address": {
                        "description": "The address of the location",
                        "type": "string"
                    },
                    "city": {
                        "description": "The city of the location",
                        "type": "string"
                    },
                    "country": {
                        "description": "The country of the location",
                        "type": "string"
                    },
                    "postal_code": {
                        "description": "The postal code of the location",
                        "type": "string"
                    },
                    "capacity": {
                        "description": "The capacity of the location",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp when the location was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the location was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "OccupationCollection": {
                "title": "OccupationCollection",
                "description": "A collection of occupation resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of occupation resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/OccupationResource"
                        }
                    }
                },
                "type": "object"
            },
            "OccupationResource": {
                "title": "Occupation",
                "description": "An occupation is a job that can be filled by a volunteer.",
                "required": [
                    "id",
                    "name",
                    "description",
                    "hourly_rate"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the occupation",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the occupation",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the occupation",
                        "type": "string"
                    },
                    "required_skills": {
                        "description": "A list of required skills",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hourly_rate": {
                        "description": "The hourly rate for the occupation",
                        "type": "number",
                        "format": "float"
                    },
                    "event": {
                        "$ref": "#\/components\/schemas\/EventResource"
                    },
                    "created_at": {
                        "description": "Timestamp when the occupation was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the occupation was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "OfferCollection": {
                "title": "OfferCollection",
                "description": "A collection of offer resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of offer resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/OfferResource"
                        }
                    }
                },
                "type": "object"
            },
            "OfferResource": {
                "title": "OfferResource",
                "description": "Represents an offer.",
                "required": [
                    "id",
                    "event_id",
                    "customer_id",
                    "description",
                    "total_price",
                    "status"
                ],
                "properties": {
                    "id": {
                        "description": "The offer ID",
                        "type": "integer"
                    },
                    "event_id": {
                        "description": "The ID of the associated event",
                        "type": "integer"
                    },
                    "customer_id": {
                        "description": "The ID of the associated customer",
                        "type": "integer"
                    },
                    "description": {
                        "description": "The description of the offer",
                        "type": "string"
                    },
                    "total_price": {
                        "description": "The total price of the offer",
                        "type": "number",
                        "format": "float"
                    },
                    "status": {
                        "description": "The current status of the offer",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the offer was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the offer was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "OfferStateCollection": {
                "title": "OfferStateCollection",
                "description": "A collection of offer state resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of offer state resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/OfferStateResource"
                        }
                    }
                },
                "type": "object"
            },
            "OfferStateResource": {
                "title": "OfferStateResource",
                "description": "Represents a offer state resource",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the offer state",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the offer state",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the offer state was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the offer state was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PaymentStateCollection": {
                "title": "PaymentStateCollection",
                "description": "A collection of payment state resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of payment state resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/PaymentStateResource"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentStateResource": {
                "title": "PaymentStateResource",
                "description": "Represents a payment state resource",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the payment state",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the payment state",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the payment state was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the payment state was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PriceGroupCollection": {
                "title": "PriceGroupCollection",
                "description": "A collection of price group resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of price group resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/PriceGroupResource"
                        }
                    }
                },
                "type": "object"
            },
            "PriceGroupResource": {
                "title": "PriceGroupResource",
                "description": "Represents a price group resource",
                "required": [
                    "id",
                    "name",
                    "description",
                    "discount",
                    "currency"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the price group",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the price group",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the price group",
                        "type": "string"
                    },
                    "discount": {
                        "description": "The discount applied to the price group",
                        "type": "number",
                        "format": "float"
                    },
                    "currency": {
                        "description": "The currency associated with the price group",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the price group was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the price group was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PromoterCollection": {
                "title": "PromoterCollection",
                "description": "A collection of promoter resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of promoter resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/PromoterResource"
                        }
                    }
                },
                "type": "object"
            },
            "PromoterGroupCollection": {
                "title": "PromoterGroupCollection",
                "description": "A collection of promoter group resources.",
                "properties": {
                    "data": {
                        "description": "Array of promoter group resources",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/PromoterGroupResource"
                        }
                    }
                },
                "type": "object"
            },
            "PromoterGroupResource": {
                "title": "PromoterGroupResource",
                "description": "Represents a promoter group resource",
                "required": [
                    "id",
                    "name",
                    "skills",
                    "description",
                    "max_members"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the promoter group",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the promoter group",
                        "type": "string"
                    },
                    "skills": {
                        "description": "The skills required for the promoter group",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "description": "The description of the promoter group",
                        "type": "string"
                    },
                    "max_members": {
                        "description": "The maximum number of members in the group",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp when the promoter group was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the promoter group was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PromoterResource": {
                "title": "PromoterResource",
                "description": "Represents a promoter resource",
                "required": [
                    "id",
                    "name",
                    "promoter_group_id",
                    "employee_id"
                ],
                "properties": {
                    "id": {
                        "description": "The commitment ID",
                        "type": "integer",
                        "example": 1
                    },
                    "employee_id": {
                        "description": "The ID of the associated employee",
                        "type": "integer",
                        "example": 1
                    },
                    "promoter_group_id": {
                        "description": "The group ID the promoter belongs to",
                        "type": "integer",
                        "example": 8
                    },
                    "name": {
                        "description": "The name of the promoter",
                        "type": "string",
                        "example": "Max Mustter"
                    },
                    "email": {
                        "description": "The email of the promoter",
                        "type": "string",
                        "example": "mustermail@musterserver.none"
                    },
                    "phone": {
                        "description": "The phone number of the promoter",
                        "type": "string",
                        "example": "+49 9276 1194484"
                    },
                    "skills": {
                        "description": "The skills of the promoter",
                        "type": "string",
                        "example": "Skillname"
                    },
                    "certifications": {
                        "description": "The certifications of the promoter",
                        "type": "string",
                        "example": "Zertifikatsname"
                    },
                    "availability": {
                        "description": "The availability of the promoter",
                        "type": "string",
                        "example": "veritatis"
                    },
                    "created_at": {
                        "description": "Timestamp when the promoter group was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-19T18:45:31.000000Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the promoter group was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-01-19T18:45:31.000000Z"
                    },
                    "employee": {
                        "title": "EmployeeDetails",
                        "description": "Employee details",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "first_name": {
                                "type": "string",
                                "example": "Max"
                            },
                            "last_name": {
                                "type": "string",
                                "example": "Muster"
                            },
                            "email": {
                                "type": "string",
                                "example": "mustermail@musterserver.none"
                            },
                            "phone": {
                                "type": "string",
                                "example": "02980 692 1491"
                            },
                            "address_line_1": {
                                "type": "string",
                                "example": "quasi"
                            },
                            "address_line_2": {
                                "type": "string",
                                "example": "nam"
                            },
                            "post_code": {
                                "type": "string",
                                "example": "fugiat"
                            },
                            "city": {
                                "type": "string",
                                "example": "Siegburg"
                            },
                            "country": {
                                "type": "string",
                                "example": null,
                                "nullable": true
                            },
                            "hire_date": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2019-05-02T00:00:00.000000Z"
                            },
                            "birth_date": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2007-08-07T00:00:00.000000Z"
                            },
                            "gender": {
                                "type": "string",
                                "example": null,
                                "nullable": true
                            },
                            "position": {
                                "type": "string",
                                "example": "voluptas"
                            },
                            "department_id": {
                                "type": "integer",
                                "example": 1
                            },
                            "salary": {
                                "type": "number",
                                "format": "float",
                                "example": 8124.03
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-01-19T18:45:31.000000Z"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-01-19T18:45:31.000000Z"
                            }
                        },
                        "type": "object"
                    },
                    "promoter_group": {
                        "title": "PromoterGroupResource_1",
                        "description": "Promoter group details",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 8
                            },
                            "name": {
                                "type": "string",
                                "example": "Vertriebsgruppe"
                            },
                            "skills": {
                                "type": "string",
                                "example": "Kreativit\u00e4t"
                            },
                            "description": {
                                "type": "string",
                                "example": "Et ratione qui consequatur eum. Magnam et ipsa placeat. Omnis non dolores magnam commodi. Sequi odit eos distinctio sequi ullam repellendus a atque."
                            },
                            "max_members": {
                                "type": "integer",
                                "example": 11
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-01-19T18:45:31.000000Z"
                            },
                            "updated_at": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-01-19T18:45:31.000000Z"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ServiceAreaCollection": {
                "title": "ServiceAreaCollection",
                "description": "A collection of service areas.",
                "properties": {
                    "data": {
                        "description": "Class ServiceAreaCollection\n\nThis resource collection handles the transformation of service area data into an array,\nsuitable for API responses, and includes OpenAPI documentation for the schema.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/ServiceAreaResource"
                        }
                    }
                },
                "type": "object"
            },
            "ServiceAreaResource": {
                "title": "ServiceAreaResource",
                "description": "Represents a service area",
                "properties": {
                    "id": {
                        "description": "The ID of the service area",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the service area",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the service area",
                        "type": "string"
                    },
                    "parent_area_id": {
                        "description": "The ID of the parent service area",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "SkillCollection": {
                "title": "SkillCollection",
                "properties": {
                    "data": {
                        "description": "Represents a collection of skill resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/SkillResource"
                        }
                    }
                },
                "type": "object"
            },
            "SkillResource": {
                "title": "SkillResource",
                "description": "Represents a skill",
                "required": [
                    "id",
                    "name",
                    "category"
                ],
                "properties": {
                    "id": {
                        "description": "The skill ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the skill",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the skill",
                        "type": "string"
                    },
                    "category": {
                        "description": "The category of the skill",
                        "type": "string"
                    },
                    "required_certification": {
                        "description": "The required certification for the skill",
                        "type": "string"
                    },
                    "related_occupations": {
                        "description": "List of related occupations",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/OccupationResource"
                        }
                    },
                    "created_at": {
                        "description": "Timestamp when the skill was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the skill was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "TimeTrackingChannelCollection": {
                "title": "TimeTrackingChannelCollection",
                "description": "Represents a collection of time tracking channels.",
                "properties": {
                    "data": {
                        "description": "The list of time tracking channels.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/TimeTrackingChannelResource"
                        }
                    }
                },
                "type": "object"
            },
            "TimeTrackingChannelResource": {
                "title": "TimeTrackingChannelResource",
                "description": "Represents a time tracking channel",
                "required": [
                    "id",
                    "name",
                    "description",
                    "active"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the time tracking channel",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "The name of the time tracking channel",
                        "type": "string",
                        "example": "Timesheet"
                    },
                    "description": {
                        "description": "The description of the time tracking channel",
                        "type": "string",
                        "example": "Timesheet"
                    },
                    "active": {
                        "description": "The active status of the time tracking channel",
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "TimeTrackingCollection": {
                "title": "TimeTrackingCollection",
                "description": "A collection of time tracking resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of time tracking resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/TimeTrackingResource"
                        }
                    }
                },
                "type": "object"
            },
            "TimeTrackingResource": {
                "title": "TimeTrackingResource",
                "description": "Represents a time tracking resource",
                "required": [
                    "id",
                    "employee_id",
                    "commitment_id",
                    "time_tracking_channel_id",
                    "time_tracking_state_id",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "id": {
                        "description": "The time tracking record ID",
                        "type": "integer",
                        "example": 1
                    },
                    "employee_id": {
                        "description": "The ID of the employee",
                        "type": "integer",
                        "example": 1
                    },
                    "commitment_id": {
                        "description": "The ID of the related commitment",
                        "type": "integer",
                        "example": 1
                    },
                    "time_tracking_channel_id": {
                        "description": "The ID of the tracking channel used",
                        "type": "integer",
                        "example": 2
                    },
                    "time_tracking_state_id": {
                        "description": "The state ID of the time entry",
                        "type": "integer",
                        "example": 1
                    },
                    "start_time": {
                        "description": "Time tracking start time",
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "description": "Time tracking end time",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "TimeTrackingStateCollection": {
                "title": "TimeTrackingStateCollection",
                "description": "A collection of time tracking state resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of time tracking state resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/TimeTrackingStateResource"
                        }
                    }
                },
                "type": "object"
            },
            "TimeTrackingStateResource": {
                "title": "TimeTrackingStateResource",
                "description": "Represents a time tracking state",
                "required": [
                    "id",
                    "name",
                    "description"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the time tracking state",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "The name of the time tracking state",
                        "type": "string",
                        "example": "Active"
                    },
                    "description": {
                        "description": "The description of the time tracking state",
                        "type": "string",
                        "example": "State indicating an active tracking time"
                    }
                },
                "type": "object"
            },
            "UserCollection": {
                "title": "UserCollection",
                "description": "A collection of user resources.",
                "properties": {
                    "data": {
                        "description": "Represents a collection of user resources.",
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/UserResource"
                        }
                    }
                },
                "type": "object"
            },
            "UserResource": {
                "title": "UserResource",
                "description": "Represents a user resource",
                "required": [
                    "id",
                    "name",
                    "email"
                ],
                "properties": {
                    "id": {
                        "description": "The ID of the user",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email of the user",
                        "type": "string",
                        "format": "email"
                    },
                    "created_at": {
                        "description": "Timestamp when the user was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the user was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "Default": {
                "description": "Default response",
                "headers": {
                    "Date": {
                        "$ref": "#\/components\/headers\/Date"
                    },
                    "Server": {
                        "$ref": "#\/components\/headers\/Server"
                    },
                    "X-Powered-By": {
                        "$ref": "#\/components\/headers\/X-Powered-By"
                    },
                    "X-RateLimit-Limit": {
                        "$ref": "#\/components\/headers\/X-RateLimit-Limit"
                    },
                    "X-RateLimit-Remaining": {
                        "$ref": "#\/components\/headers\/X-RateLimit-Remaining"
                    },
                    "Access-Control-Allow-Origin": {
                        "$ref": "#\/components\/headers\/Access-Control-Allow-Origin"
                    },
                    "Access-Control-Allow-Methods": {
                        "$ref": "#\/components\/headers\/Access-Control-Allow-Methods"
                    },
                    "Access-Control-Allow-Headers": {
                        "$ref": "#\/components\/headers\/Access-Control-Allow-Headers"
                    },
                    "Keep-Alive": {
                        "$ref": "#\/components\/headers\/Keep-Alive"
                    },
                    "Connection": {
                        "$ref": "#\/components\/headers\/Connection"
                    },
                    "Transfer-Encoding": {
                        "$ref": "#\/components\/headers\/Transfer-Encoding"
                    },
                    "Cache-Control": {
                        "$ref": "#\/components\/headers\/Cache-Control"
                    }
                },
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "headers": {
            "Date": {
                "description": "Date of the request",
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "Server": {
                "description": "The server that processed the request",
                "schema": {
                    "type": "string"
                }
            },
            "X-RateLimit-Limit": {
                "description": "The number of allowed requests in the current period",
                "schema": {
                    "type": "integer"
                }
            },
            "X-RateLimit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "schema": {
                    "type": "integer"
                }
            },
            "X-Powered-By": {
                "description": "The technology powering the API",
                "schema": {
                    "type": "string"
                }
            },
            "Cache-Control": {
                "description": "The caching policy for the response",
                "schema": {
                    "type": "string"
                }
            },
            "Access-Control-Allow-Origin": {
                "description": "The origin from which the request was made",
                "schema": {
                    "type": "string"
                }
            },
            "Access-Control-Allow-Methods": {
                "description": "The HTTP methods that are allowed",
                "schema": {
                    "type": "string"
                }
            },
            "Access-Control-Allow-Headers": {
                "description": "The HTTP headers that are allowed",
                "schema": {
                    "type": "string"
                }
            },
            "Keep-Alive": {
                "description": "The connection policy for the response",
                "schema": {
                    "type": "string"
                }
            },
            "Connection": {
                "description": "The connection policy for the response",
                "schema": {
                    "type": "string"
                }
            },
            "Transfer-Encoding": {
                "description": "The encoding used for the response",
                "schema": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Commitments",
            "description": "Operations for managing commitments"
        },
        {
            "name": "ContactPersons",
            "description": "Operations for managing contact persons"
        },
        {
            "name": "Countries",
            "description": "Operations for managing countries"
        },
        {
            "name": "Customers",
            "description": "Operations for managing customers"
        },
        {
            "name": "Departments",
            "description": "Operations for managing departments"
        },
        {
            "name": "Employees",
            "description": "Operations for managing employees"
        },
        {
            "name": "Events",
            "description": "Operations for managing events"
        },
        {
            "name": "Event States",
            "description": "Operations for managing event states"
        },
        {
            "name": "Genders",
            "description": "Operations for managing genders"
        },
        {
            "name": "Inventory Conditions",
            "description": "Operations for managing inventory conditions"
        },
        {
            "name": "Inventories",
            "description": "Operations for managing inventories"
        },
        {
            "name": "Invoices",
            "description": "Operations for managing invoices"
        },
        {
            "name": "Locations",
            "description": "Operations for managing locations"
        },
        {
            "name": "Occupations",
            "description": "Operations for managing occupations"
        },
        {
            "name": "Offers",
            "description": "Operations for managing offers"
        },
        {
            "name": "OfferStates",
            "description": "Operations for managing offer states"
        },
        {
            "name": "Payment States",
            "description": "Operations for managing payment states"
        },
        {
            "name": "Price Groups",
            "description": "Operations for managing price groups"
        },
        {
            "name": "Promoters",
            "description": "Operations for managing promoters"
        },
        {
            "name": "Promoter Groups",
            "description": "Operations for managing promoter groups"
        },
        {
            "name": "ServiceArea",
            "description": "Operations about ServiceArea"
        },
        {
            "name": "Skills",
            "description": "Operations for managing skills"
        },
        {
            "name": "TimeTrackingChannels",
            "description": "Operations for managing time tracking channels"
        },
        {
            "name": "TimeTrackings",
            "description": "Operations for managing time tracking entries"
        },
        {
            "name": "TimeTrackingStates",
            "description": "Operations for managing time tracking states."
        },
        {
            "name": "Commitment States",
            "description": "Commitment States"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ]
}